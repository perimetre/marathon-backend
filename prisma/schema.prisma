// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Locale {
  en
  fr
}

model Collection {
  id                 Int                      @id @default(autoincrement())
  slug               String                   @unique
  thumbnailUrl       String?                  @db.VarChar(255)
  translations       CollectionTranslations[]
  projects           Project[]
  modules            Module[]
  collectionFinishes CollectionFinishes[]
  slides             Slide[]
}

model CollectionFinishes {
  id           Int        @id @default(autoincrement())
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  finishId     Int
  finish       Finish     @relation(fields: [finishId], references: [id])
}

model CollectionTranslations {
  id           Int        @id @default(autoincrement())
  locale       Locale
  name         String
  subtitle     String?
  description  String?
  footer       String?
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Finish {
  id                 Int                  @id @default(autoincrement())
  slug               String               @unique
  thumbnailUrl       String?              @db.VarChar(255)
  translations       FinishTranslations[]
  projects           Project[]
  modules            Module[]
  collectionFinishes CollectionFinishes[]
}

model FinishTranslations {
  id          Int     @id @default(autoincrement())
  locale      Locale
  name        String
  description String?
  finishId    Int
  finish      Finish  @relation(fields: [finishId], references: [id])
}

model Module {
  id                 Int             @id @default(autoincrement())
  partNumber         String          @unique
  thumbnailUrl       String?         @db.VarChar(255)
  bundleUrl          String?         @db.VarChar(255)
  isSubmodule        Boolean         @default(false)
  hasPegs            Boolean         @default(false)
  isMat              Boolean         @default(false)
  isImprintExtension Boolean         @default(false)
  finishId           Int
  finish             Finish          @relation(fields: [finishId], references: [id])
  collectionId       Int
  collection         Collection      @relation(fields: [collectionId], references: [id])
  rules              Json?
  projectModules     ProjectModule[]
}

model Project {
  id             Int             @id @default(autoincrement())
  slug           String          @unique
  title          String          @db.VarChar(255)
  width          Float
  gable          Float
  typeId         Int
  type           Type            @relation(fields: [typeId], references: [id])
  collectionId   Int
  collection     Collection      @relation(fields: [collectionId], references: [id])
  finishId       Int
  finish         Finish          @relation(fields: [finishId], references: [id])
  groupId        Int
  group          ProjectGroup    @relation(fields: [groupId], references: [id])
  slideId        Int
  slide          Slide           @relation(fields: [slideId], references: [id])
  slideDepthId   Int
  slideDepth     SlideDepth      @relation(fields: [slideDepthId], references: [id])
  projectModules ProjectModule[]
}

model ProjectGroup {
  id       Int                @id @default(autoincrement())
  name     String             @db.VarChar(255)
  slug     String             @unique
  projects Project[]
  users    UserProjectGroup[]
}

model ProjectModule {
  id        Int             @id @default(autoincrement())
  posX      Float
  posZ      Float
  rotZ      Float
  moduleId  Int
  module    Module          @relation(fields: [moduleId], references: [id])
  parentId  Int?
  parent    ProjectModule?  @relation("ProjectModuleToProjectModule", fields: [parentId], references: [id])
  children  ProjectModule[] @relation("ProjectModuleToProjectModule")
  projectId Int?
  project   Project?        @relation(fields: [projectId], references: [id])
}

model Slide {
  id           Int           @id @default(autoincrement())
  product      String        @db.VarChar(255)
  slug         String        @unique
  formula      String        @db.VarChar(255)
  supplierId   Int
  supplier     SlideSupplier @relation(fields: [supplierId], references: [id])
  collectionId Int
  collection   Collection    @relation(fields: [collectionId], references: [id])
  depths       SlideDepth[]
  projects     Project[]
}

model SlideDepth {
  id       Int       @id @default(autoincrement())
  display  String    @db.VarChar(255)
  depth    Float
  slideId  Int
  slide    Slide     @relation(fields: [slideId], references: [id])
  projects Project[]
}

model SlideSupplier {
  id           Int     @id @default(autoincrement())
  thumbnailUrl String? @db.VarChar(255)
  name         String  @db.VarChar(255)
  slug         String  @unique
  slides       Slide[]
}

model Type {
  id           Int                @id @default(autoincrement())
  slug         String             @unique
  thumbnailUrl String?            @db.VarChar(255)
  translations TypeTranslations[]
  projects     Project[]
}

model TypeTranslations {
  id          Int     @id @default(autoincrement())
  locale      Locale
  name        String
  description String?
  typeId      Int
  type        Type    @relation(fields: [typeId], references: [id])
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique @db.VarChar(255)
  userProjectGroups UserProjectGroup[]
}

enum UserProjectGroupRelationshipType {
  owner
  member
}

model UserProjectGroup {
  id               Int                              @id @default(autoincrement())
  groupId          Int
  group            ProjectGroup                     @relation(fields: [groupId], references: [id])
  userId           Int
  user             User                             @relation(fields: [userId], references: [id])
  relationshipType UserProjectGroupRelationshipType
}
