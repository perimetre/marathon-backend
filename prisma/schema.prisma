// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Locale {
  en
  fr
}

model CollectionTranslations {
  id           Int        @id
  locale       Locale
  name         String
  description  String
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Collection {
  id           Int                      @id @default(autoincrement())
  thumbnailUrl String                   @db.VarChar(255)
  translations CollectionTranslations[]
  projects     Project[]
  Module       Module[]
}

model FinishTranslations {
  id          Int    @id
  locale      Locale
  name        String
  description String
  finishId    Int
  finish      Finish @relation(fields: [finishId], references: [id])
}

model Finish {
  id           Int                  @id @default(autoincrement())
  thumbnailUrl String               @db.VarChar(255)
  translations FinishTranslations[]
  projects     Project[]
  Module       Module[]
}

model TypeTranslations {
  id          Int    @id
  locale      Locale
  name        String
  description String
  typeId      Int
  type        Type   @relation(fields: [typeId], references: [id])
}

model Type {
  id           Int                @id @default(autoincrement())
  thumbnailUrl String             @db.VarChar(255)
  translations TypeTranslations[]
  projects     Project[]
}

model Module {
  id             Int             @id @default(autoincrement())
  partNumber     String          @unique
  thumbnailUrl   String          @db.VarChar(255)
  finishId       Int
  finish         Finish          @relation(fields: [finishId], references: [id])
  collectionId   Int
  collection     Collection      @relation(fields: [collectionId], references: [id])
  rules          Json
  projectModules ProjectModule[]
}

model Project {
  id             Int             @id @default(autoincrement())
  title          String          @db.VarChar(255)
  width          Float
  gable          Float
  typeId         Int
  type           Type            @relation(fields: [typeId], references: [id])
  collectionId   Int
  collection     Collection      @relation(fields: [collectionId], references: [id])
  finishId       Int
  finish         Finish          @relation(fields: [finishId], references: [id])
  groupId        Int
  group          ProjectGroup    @relation(fields: [groupId], references: [id])
  slideId        Int
  slide          Slide           @relation(fields: [slideId], references: [id])
  slideDepthId   Int
  slideDepth     SlideDepth      @relation(fields: [slideDepthId], references: [id])
  projectModules ProjectModule[]
}

model ProjectGroup {
  id       Int                @id @default(autoincrement())
  name     String             @db.VarChar(255)
  projects Project[]
  users    UserProjectGroup[]
}

model ProjectModule {
  id        Int             @id @default(autoincrement())
  posX      Float
  posZ      Float
  rotZ      Float
  moduleId  Int
  module    Module          @relation(fields: [moduleId], references: [id])
  parentId  Int?
  parent    ProjectModule?  @relation(fields: [parentId], references: [id])
  children  ProjectModule[] @relation("ProjectModuleToProjectModule")
  projectId Int?
  project   Project?        @relation(fields: [projectId], references: [id])
}

model SlideDepth {
  id       Int       @id @default(autoincrement())
  display  String    @db.VarChar(255)
  depth    Float
  slideId  Int
  slide    Slide     @relation(fields: [slideId], references: [id])
  projects Project[]
}

model SlideSupplier {
  id           Int     @id @default(autoincrement())
  thumbnailUrl String  @db.VarChar(255)
  name         String  @db.VarChar(255)
  slides       Slide[]
}

model Slide {
  id         Int           @id @default(autoincrement())
  model      String        @db.VarChar(255)
  formula    String        @db.VarChar(255)
  supplierId Int
  supplier   SlideSupplier @relation(fields: [supplierId], references: [id])
  depths     SlideDepth[]
  projects   Project[]
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique @db.VarChar(255)
  userProjectGroups UserProjectGroup[]
}

enum UserProjectGroupRelationshipType {
  owner
  member
}

model UserProjectGroup {
  id               Int                              @id @default(autoincrement())
  groupId          Int
  group            ProjectGroup                     @relation(fields: [groupId], references: [id])
  userId           Int
  user             User                             @relation(fields: [userId], references: [id])
  relationshipType UserProjectGroupRelationshipType
}
