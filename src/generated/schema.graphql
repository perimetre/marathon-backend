### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AffectedRowsOutput {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  id: Int!
  modules(where: ModuleWhereInput): [Module!]!
  name: String!
  slug: String!
}

input CategoryCreateNestedOneWithoutModuleCategoriesInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutModuleCategoriesInput
  create: CategoryCreateWithoutModuleCategoriesInput
}

input CategoryCreateOrConnectWithoutModuleCategoriesInput {
  create: CategoryCreateWithoutModuleCategoriesInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutModuleCategoriesInput {
  name: String!
  slug: String!
}

input CategoryOrderByInput {
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input CategoryUpdateOneRequiredWithoutModuleCategoriesInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutModuleCategoriesInput
  create: CategoryCreateWithoutModuleCategoriesInput
  update: CategoryUpdateWithoutModuleCategoriesInput
  upsert: CategoryUpsertWithoutModuleCategoriesInput
}

input CategoryUpdateWithoutModuleCategoriesInput {
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpsertWithoutModuleCategoriesInput {
  create: CategoryCreateWithoutModuleCategoriesInput!
  update: CategoryUpdateWithoutModuleCategoriesInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: IntFilter
  moduleCategories: ModuleCategoryListRelationFilter
  name: StringFilter
  slug: StringFilter
}

input CategoryWhereUniqueInput {
  id: Int
  slug: String
}

type Collection {
  collectionFinishes(
    cursor: CollectionFinishesWhereUniqueInput
    orderBy: [CollectionFinishesOrderByInput!]
    skip: Int
    take: Int
    where: CollectionFinishesWhereInput
  ): [CollectionFinishes!]!
  description: String
  footer: String
  hasPegs: Boolean!
  id: Int!
  modules(
    cursor: ModuleWhereUniqueInput
    orderBy: [ModuleOrderByInput!]
    skip: Int
    take: Int
    where: ModuleWhereInput
  ): [Module!]!
  name: String!
  projects(
    cursor: ProjectWhereUniqueInput
    orderBy: [ProjectOrderByInput!]
    skip: Int
    take: Int
    where: ProjectWhereInput
  ): [Project!]!
  slides(
    cursor: SlideWhereUniqueInput
    orderBy: [SlideOrderByInput!]
    skip: Int
    take: Int
    where: SlideWhereInput
  ): [Slide!]!
  slug: String!
  subtitle: String
  thumbnailUrl: String
}

input CollectionCreateNestedOneWithoutCollectionFinishesInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutCollectionFinishesInput
  create: CollectionCreateWithoutCollectionFinishesInput
}

input CollectionCreateNestedOneWithoutModulesInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutModulesInput
  create: CollectionCreateWithoutModulesInput
}

input CollectionCreateNestedOneWithoutProjectsInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutProjectsInput
  create: CollectionCreateWithoutProjectsInput
}

input CollectionCreateNestedOneWithoutSlidesInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutSlidesInput
  create: CollectionCreateWithoutSlidesInput
}

input CollectionCreateOrConnectWithoutCollectionFinishesInput {
  create: CollectionCreateWithoutCollectionFinishesInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateOrConnectWithoutModulesInput {
  create: CollectionCreateWithoutModulesInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateOrConnectWithoutProjectsInput {
  create: CollectionCreateWithoutProjectsInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateOrConnectWithoutSlidesInput {
  create: CollectionCreateWithoutSlidesInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateWithoutCollectionFinishesInput {
  hasPegs: Boolean
  modules: ModuleCreateNestedManyWithoutCollectionInput
  projects: ProjectCreateNestedManyWithoutCollectionInput
  slides: SlideCreateNestedManyWithoutCollectionInput
  slug: String!
  thumbnailUrl: String
  translations: CollectionTranslationsCreateNestedManyWithoutCollectionInput
}

input CollectionCreateWithoutModulesInput {
  collectionFinishes: CollectionFinishesCreateNestedManyWithoutCollectionInput
  hasPegs: Boolean
  projects: ProjectCreateNestedManyWithoutCollectionInput
  slides: SlideCreateNestedManyWithoutCollectionInput
  slug: String!
  thumbnailUrl: String
  translations: CollectionTranslationsCreateNestedManyWithoutCollectionInput
}

input CollectionCreateWithoutProjectsInput {
  collectionFinishes: CollectionFinishesCreateNestedManyWithoutCollectionInput
  hasPegs: Boolean
  modules: ModuleCreateNestedManyWithoutCollectionInput
  slides: SlideCreateNestedManyWithoutCollectionInput
  slug: String!
  thumbnailUrl: String
  translations: CollectionTranslationsCreateNestedManyWithoutCollectionInput
}

input CollectionCreateWithoutSlidesInput {
  collectionFinishes: CollectionFinishesCreateNestedManyWithoutCollectionInput
  hasPegs: Boolean
  modules: ModuleCreateNestedManyWithoutCollectionInput
  projects: ProjectCreateNestedManyWithoutCollectionInput
  slug: String!
  thumbnailUrl: String
  translations: CollectionTranslationsCreateNestedManyWithoutCollectionInput
}

type CollectionFinishes {
  collection: Collection!
  collectionId: Int!
  finish: Finish!
  finishId: Int!
  id: Int!
}

input CollectionFinishesCreateManyCollectionInput {
  finishId: Int!
  id: Int
}

input CollectionFinishesCreateManyCollectionInputEnvelope {
  data: [CollectionFinishesCreateManyCollectionInput!]
  skipDuplicates: Boolean
}

input CollectionFinishesCreateManyFinishInput {
  collectionId: Int!
  id: Int
}

input CollectionFinishesCreateManyFinishInputEnvelope {
  data: [CollectionFinishesCreateManyFinishInput!]
  skipDuplicates: Boolean
}

input CollectionFinishesCreateNestedManyWithoutCollectionInput {
  connect: [CollectionFinishesWhereUniqueInput!]
  connectOrCreate: [CollectionFinishesCreateOrConnectWithoutCollectionInput!]
  create: [CollectionFinishesCreateWithoutCollectionInput!]
  createMany: CollectionFinishesCreateManyCollectionInputEnvelope
}

input CollectionFinishesCreateNestedManyWithoutFinishInput {
  connect: [CollectionFinishesWhereUniqueInput!]
  connectOrCreate: [CollectionFinishesCreateOrConnectWithoutFinishInput!]
  create: [CollectionFinishesCreateWithoutFinishInput!]
  createMany: CollectionFinishesCreateManyFinishInputEnvelope
}

input CollectionFinishesCreateOrConnectWithoutCollectionInput {
  create: CollectionFinishesCreateWithoutCollectionInput!
  where: CollectionFinishesWhereUniqueInput!
}

input CollectionFinishesCreateOrConnectWithoutFinishInput {
  create: CollectionFinishesCreateWithoutFinishInput!
  where: CollectionFinishesWhereUniqueInput!
}

input CollectionFinishesCreateWithoutCollectionInput {
  finish: FinishCreateNestedOneWithoutCollectionFinishesInput!
}

input CollectionFinishesCreateWithoutFinishInput {
  collection: CollectionCreateNestedOneWithoutCollectionFinishesInput!
}

input CollectionFinishesListRelationFilter {
  every: CollectionFinishesWhereInput
  none: CollectionFinishesWhereInput
  some: CollectionFinishesWhereInput
}

input CollectionFinishesOrderByInput {
  collectionId: SortOrder
  finishId: SortOrder
  id: SortOrder
}

input CollectionFinishesScalarWhereInput {
  AND: [CollectionFinishesScalarWhereInput!]
  NOT: [CollectionFinishesScalarWhereInput!]
  OR: [CollectionFinishesScalarWhereInput!]
  collectionId: IntFilter
  finishId: IntFilter
  id: IntFilter
}

input CollectionFinishesUpdateManyMutationInput {
  _: Int
}

input CollectionFinishesUpdateManyWithWhereWithoutCollectionInput {
  data: CollectionFinishesUpdateManyMutationInput!
  where: CollectionFinishesScalarWhereInput!
}

input CollectionFinishesUpdateManyWithWhereWithoutFinishInput {
  data: CollectionFinishesUpdateManyMutationInput!
  where: CollectionFinishesScalarWhereInput!
}

input CollectionFinishesUpdateManyWithoutCollectionInput {
  connect: [CollectionFinishesWhereUniqueInput!]
  connectOrCreate: [CollectionFinishesCreateOrConnectWithoutCollectionInput!]
  create: [CollectionFinishesCreateWithoutCollectionInput!]
  createMany: CollectionFinishesCreateManyCollectionInputEnvelope
  delete: [CollectionFinishesWhereUniqueInput!]
  deleteMany: [CollectionFinishesScalarWhereInput!]
  disconnect: [CollectionFinishesWhereUniqueInput!]
  set: [CollectionFinishesWhereUniqueInput!]
  update: [CollectionFinishesUpdateWithWhereUniqueWithoutCollectionInput!]
  updateMany: [CollectionFinishesUpdateManyWithWhereWithoutCollectionInput!]
  upsert: [CollectionFinishesUpsertWithWhereUniqueWithoutCollectionInput!]
}

input CollectionFinishesUpdateManyWithoutFinishInput {
  connect: [CollectionFinishesWhereUniqueInput!]
  connectOrCreate: [CollectionFinishesCreateOrConnectWithoutFinishInput!]
  create: [CollectionFinishesCreateWithoutFinishInput!]
  createMany: CollectionFinishesCreateManyFinishInputEnvelope
  delete: [CollectionFinishesWhereUniqueInput!]
  deleteMany: [CollectionFinishesScalarWhereInput!]
  disconnect: [CollectionFinishesWhereUniqueInput!]
  set: [CollectionFinishesWhereUniqueInput!]
  update: [CollectionFinishesUpdateWithWhereUniqueWithoutFinishInput!]
  updateMany: [CollectionFinishesUpdateManyWithWhereWithoutFinishInput!]
  upsert: [CollectionFinishesUpsertWithWhereUniqueWithoutFinishInput!]
}

input CollectionFinishesUpdateWithWhereUniqueWithoutCollectionInput {
  data: CollectionFinishesUpdateWithoutCollectionInput!
  where: CollectionFinishesWhereUniqueInput!
}

input CollectionFinishesUpdateWithWhereUniqueWithoutFinishInput {
  data: CollectionFinishesUpdateWithoutFinishInput!
  where: CollectionFinishesWhereUniqueInput!
}

input CollectionFinishesUpdateWithoutCollectionInput {
  finish: FinishUpdateOneRequiredWithoutCollectionFinishesInput
}

input CollectionFinishesUpdateWithoutFinishInput {
  collection: CollectionUpdateOneRequiredWithoutCollectionFinishesInput
}

input CollectionFinishesUpsertWithWhereUniqueWithoutCollectionInput {
  create: CollectionFinishesCreateWithoutCollectionInput!
  update: CollectionFinishesUpdateWithoutCollectionInput!
  where: CollectionFinishesWhereUniqueInput!
}

input CollectionFinishesUpsertWithWhereUniqueWithoutFinishInput {
  create: CollectionFinishesCreateWithoutFinishInput!
  update: CollectionFinishesUpdateWithoutFinishInput!
  where: CollectionFinishesWhereUniqueInput!
}

input CollectionFinishesWhereInput {
  AND: [CollectionFinishesWhereInput!]
  NOT: [CollectionFinishesWhereInput!]
  OR: [CollectionFinishesWhereInput!]
  collection: CollectionWhereInput
  collectionId: IntFilter
  finish: FinishWhereInput
  finishId: IntFilter
  id: IntFilter
}

input CollectionFinishesWhereUniqueInput {
  id: Int
}

input CollectionOrderByInput {
  hasPegs: SortOrder
  id: SortOrder
  slug: SortOrder
  thumbnailUrl: SortOrder
}

type CollectionTranslations {
  collection: Collection!
  collectionId: Int!
  description: String
  footer: String
  id: Int!
  locale: Locale!
  name: String!
  subtitle: String
}

input CollectionTranslationsCreateManyCollectionInput {
  description: String
  footer: String
  id: Int
  locale: Locale!
  name: String!
  subtitle: String
}

input CollectionTranslationsCreateManyCollectionInputEnvelope {
  data: [CollectionTranslationsCreateManyCollectionInput!]
  skipDuplicates: Boolean
}

input CollectionTranslationsCreateNestedManyWithoutCollectionInput {
  connect: [CollectionTranslationsWhereUniqueInput!]
  connectOrCreate: [CollectionTranslationsCreateOrConnectWithoutCollectionInput!]
  create: [CollectionTranslationsCreateWithoutCollectionInput!]
  createMany: CollectionTranslationsCreateManyCollectionInputEnvelope
}

input CollectionTranslationsCreateOrConnectWithoutCollectionInput {
  create: CollectionTranslationsCreateWithoutCollectionInput!
  where: CollectionTranslationsWhereUniqueInput!
}

input CollectionTranslationsCreateWithoutCollectionInput {
  description: String
  footer: String
  locale: Locale!
  name: String!
  subtitle: String
}

input CollectionTranslationsListRelationFilter {
  every: CollectionTranslationsWhereInput
  none: CollectionTranslationsWhereInput
  some: CollectionTranslationsWhereInput
}

input CollectionTranslationsScalarWhereInput {
  AND: [CollectionTranslationsScalarWhereInput!]
  NOT: [CollectionTranslationsScalarWhereInput!]
  OR: [CollectionTranslationsScalarWhereInput!]
  collectionId: IntFilter
  description: StringNullableFilter
  footer: StringNullableFilter
  id: IntFilter
  locale: EnumLocaleFilter
  name: StringFilter
  subtitle: StringNullableFilter
}

input CollectionTranslationsUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  footer: NullableStringFieldUpdateOperationsInput
  locale: EnumLocaleFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  subtitle: NullableStringFieldUpdateOperationsInput
}

input CollectionTranslationsUpdateManyWithWhereWithoutCollectionInput {
  data: CollectionTranslationsUpdateManyMutationInput!
  where: CollectionTranslationsScalarWhereInput!
}

input CollectionTranslationsUpdateManyWithoutCollectionInput {
  connect: [CollectionTranslationsWhereUniqueInput!]
  connectOrCreate: [CollectionTranslationsCreateOrConnectWithoutCollectionInput!]
  create: [CollectionTranslationsCreateWithoutCollectionInput!]
  createMany: CollectionTranslationsCreateManyCollectionInputEnvelope
  delete: [CollectionTranslationsWhereUniqueInput!]
  deleteMany: [CollectionTranslationsScalarWhereInput!]
  disconnect: [CollectionTranslationsWhereUniqueInput!]
  set: [CollectionTranslationsWhereUniqueInput!]
  update: [CollectionTranslationsUpdateWithWhereUniqueWithoutCollectionInput!]
  updateMany: [CollectionTranslationsUpdateManyWithWhereWithoutCollectionInput!]
  upsert: [CollectionTranslationsUpsertWithWhereUniqueWithoutCollectionInput!]
}

input CollectionTranslationsUpdateWithWhereUniqueWithoutCollectionInput {
  data: CollectionTranslationsUpdateWithoutCollectionInput!
  where: CollectionTranslationsWhereUniqueInput!
}

input CollectionTranslationsUpdateWithoutCollectionInput {
  description: NullableStringFieldUpdateOperationsInput
  footer: NullableStringFieldUpdateOperationsInput
  locale: EnumLocaleFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  subtitle: NullableStringFieldUpdateOperationsInput
}

input CollectionTranslationsUpsertWithWhereUniqueWithoutCollectionInput {
  create: CollectionTranslationsCreateWithoutCollectionInput!
  update: CollectionTranslationsUpdateWithoutCollectionInput!
  where: CollectionTranslationsWhereUniqueInput!
}

input CollectionTranslationsWhereInput {
  AND: [CollectionTranslationsWhereInput!]
  NOT: [CollectionTranslationsWhereInput!]
  OR: [CollectionTranslationsWhereInput!]
  collection: CollectionWhereInput
  collectionId: IntFilter
  description: StringNullableFilter
  footer: StringNullableFilter
  id: IntFilter
  locale: EnumLocaleFilter
  name: StringFilter
  subtitle: StringNullableFilter
}

input CollectionTranslationsWhereUniqueInput {
  id: Int
}

input CollectionUpdateOneRequiredWithoutCollectionFinishesInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutCollectionFinishesInput
  create: CollectionCreateWithoutCollectionFinishesInput
  update: CollectionUpdateWithoutCollectionFinishesInput
  upsert: CollectionUpsertWithoutCollectionFinishesInput
}

input CollectionUpdateOneRequiredWithoutModulesInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutModulesInput
  create: CollectionCreateWithoutModulesInput
  update: CollectionUpdateWithoutModulesInput
  upsert: CollectionUpsertWithoutModulesInput
}

input CollectionUpdateOneRequiredWithoutProjectsInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutProjectsInput
  create: CollectionCreateWithoutProjectsInput
  update: CollectionUpdateWithoutProjectsInput
  upsert: CollectionUpsertWithoutProjectsInput
}

input CollectionUpdateOneRequiredWithoutSlidesInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutSlidesInput
  create: CollectionCreateWithoutSlidesInput
  update: CollectionUpdateWithoutSlidesInput
  upsert: CollectionUpsertWithoutSlidesInput
}

input CollectionUpdateWithoutCollectionFinishesInput {
  hasPegs: BoolFieldUpdateOperationsInput
  modules: ModuleUpdateManyWithoutCollectionInput
  projects: ProjectUpdateManyWithoutCollectionInput
  slides: SlideUpdateManyWithoutCollectionInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  translations: CollectionTranslationsUpdateManyWithoutCollectionInput
}

input CollectionUpdateWithoutModulesInput {
  collectionFinishes: CollectionFinishesUpdateManyWithoutCollectionInput
  hasPegs: BoolFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutCollectionInput
  slides: SlideUpdateManyWithoutCollectionInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  translations: CollectionTranslationsUpdateManyWithoutCollectionInput
}

input CollectionUpdateWithoutProjectsInput {
  collectionFinishes: CollectionFinishesUpdateManyWithoutCollectionInput
  hasPegs: BoolFieldUpdateOperationsInput
  modules: ModuleUpdateManyWithoutCollectionInput
  slides: SlideUpdateManyWithoutCollectionInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  translations: CollectionTranslationsUpdateManyWithoutCollectionInput
}

input CollectionUpdateWithoutSlidesInput {
  collectionFinishes: CollectionFinishesUpdateManyWithoutCollectionInput
  hasPegs: BoolFieldUpdateOperationsInput
  modules: ModuleUpdateManyWithoutCollectionInput
  projects: ProjectUpdateManyWithoutCollectionInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  translations: CollectionTranslationsUpdateManyWithoutCollectionInput
}

input CollectionUpsertWithoutCollectionFinishesInput {
  create: CollectionCreateWithoutCollectionFinishesInput!
  update: CollectionUpdateWithoutCollectionFinishesInput!
}

input CollectionUpsertWithoutModulesInput {
  create: CollectionCreateWithoutModulesInput!
  update: CollectionUpdateWithoutModulesInput!
}

input CollectionUpsertWithoutProjectsInput {
  create: CollectionCreateWithoutProjectsInput!
  update: CollectionUpdateWithoutProjectsInput!
}

input CollectionUpsertWithoutSlidesInput {
  create: CollectionCreateWithoutSlidesInput!
  update: CollectionUpdateWithoutSlidesInput!
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  collectionFinishes: CollectionFinishesListRelationFilter
  hasPegs: BoolFilter
  id: IntFilter
  modules: ModuleListRelationFilter
  projects: ProjectListRelationFilter
  slides: SlideListRelationFilter
  slug: StringFilter
  thumbnailUrl: StringNullableFilter
  translations: CollectionTranslationsListRelationFilter
}

input CollectionWhereUniqueInput {
  id: Int
  slug: String
}

input EnumLocaleFieldUpdateOperationsInput {
  set: Locale
}

input EnumLocaleFilter {
  equals: Locale
  in: [Locale!]
  not: NestedEnumLocaleFilter
  notIn: [Locale!]
}

type Finish {
  collectionFinishes(
    cursor: CollectionFinishesWhereUniqueInput
    orderBy: [CollectionFinishesOrderByInput!]
    skip: Int
    take: Int
    where: CollectionFinishesWhereInput
  ): [CollectionFinishes!]!
  description: String
  id: Int!
  modules(
    cursor: ModuleWhereUniqueInput
    orderBy: [ModuleOrderByInput!]
    skip: Int
    take: Int
    where: ModuleWhereInput
  ): [Module!]!
  name: String!
  projects(
    cursor: ProjectWhereUniqueInput
    orderBy: [ProjectOrderByInput!]
    skip: Int
    take: Int
    where: ProjectWhereInput
  ): [Project!]!
  slug: String!
  thumbnailUrl: String
}

input FinishCreateNestedOneWithoutCollectionFinishesInput {
  connect: FinishWhereUniqueInput
  connectOrCreate: FinishCreateOrConnectWithoutCollectionFinishesInput
  create: FinishCreateWithoutCollectionFinishesInput
}

input FinishCreateNestedOneWithoutModulesInput {
  connect: FinishWhereUniqueInput
  connectOrCreate: FinishCreateOrConnectWithoutModulesInput
  create: FinishCreateWithoutModulesInput
}

input FinishCreateNestedOneWithoutProjectsInput {
  connect: FinishWhereUniqueInput
  connectOrCreate: FinishCreateOrConnectWithoutProjectsInput
  create: FinishCreateWithoutProjectsInput
}

input FinishCreateOrConnectWithoutCollectionFinishesInput {
  create: FinishCreateWithoutCollectionFinishesInput!
  where: FinishWhereUniqueInput!
}

input FinishCreateOrConnectWithoutModulesInput {
  create: FinishCreateWithoutModulesInput!
  where: FinishWhereUniqueInput!
}

input FinishCreateOrConnectWithoutProjectsInput {
  create: FinishCreateWithoutProjectsInput!
  where: FinishWhereUniqueInput!
}

input FinishCreateWithoutCollectionFinishesInput {
  modules: ModuleCreateNestedManyWithoutFinishInput
  projects: ProjectCreateNestedManyWithoutFinishInput
  slug: String!
  thumbnailUrl: String
  translations: FinishTranslationsCreateNestedManyWithoutFinishInput
}

input FinishCreateWithoutModulesInput {
  collectionFinishes: CollectionFinishesCreateNestedManyWithoutFinishInput
  projects: ProjectCreateNestedManyWithoutFinishInput
  slug: String!
  thumbnailUrl: String
  translations: FinishTranslationsCreateNestedManyWithoutFinishInput
}

input FinishCreateWithoutProjectsInput {
  collectionFinishes: CollectionFinishesCreateNestedManyWithoutFinishInput
  modules: ModuleCreateNestedManyWithoutFinishInput
  slug: String!
  thumbnailUrl: String
  translations: FinishTranslationsCreateNestedManyWithoutFinishInput
}

input FinishOrderByInput {
  id: SortOrder
  slug: SortOrder
  thumbnailUrl: SortOrder
}

type FinishTranslations {
  description: String
  finish: Finish!
  finishId: Int!
  id: Int!
  locale: Locale!
  name: String!
}

input FinishTranslationsCreateManyFinishInput {
  description: String
  id: Int
  locale: Locale!
  name: String!
}

input FinishTranslationsCreateManyFinishInputEnvelope {
  data: [FinishTranslationsCreateManyFinishInput!]
  skipDuplicates: Boolean
}

input FinishTranslationsCreateNestedManyWithoutFinishInput {
  connect: [FinishTranslationsWhereUniqueInput!]
  connectOrCreate: [FinishTranslationsCreateOrConnectWithoutFinishInput!]
  create: [FinishTranslationsCreateWithoutFinishInput!]
  createMany: FinishTranslationsCreateManyFinishInputEnvelope
}

input FinishTranslationsCreateOrConnectWithoutFinishInput {
  create: FinishTranslationsCreateWithoutFinishInput!
  where: FinishTranslationsWhereUniqueInput!
}

input FinishTranslationsCreateWithoutFinishInput {
  description: String
  locale: Locale!
  name: String!
}

input FinishTranslationsListRelationFilter {
  every: FinishTranslationsWhereInput
  none: FinishTranslationsWhereInput
  some: FinishTranslationsWhereInput
}

input FinishTranslationsScalarWhereInput {
  AND: [FinishTranslationsScalarWhereInput!]
  NOT: [FinishTranslationsScalarWhereInput!]
  OR: [FinishTranslationsScalarWhereInput!]
  description: StringNullableFilter
  finishId: IntFilter
  id: IntFilter
  locale: EnumLocaleFilter
  name: StringFilter
}

input FinishTranslationsUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  locale: EnumLocaleFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input FinishTranslationsUpdateManyWithWhereWithoutFinishInput {
  data: FinishTranslationsUpdateManyMutationInput!
  where: FinishTranslationsScalarWhereInput!
}

input FinishTranslationsUpdateManyWithoutFinishInput {
  connect: [FinishTranslationsWhereUniqueInput!]
  connectOrCreate: [FinishTranslationsCreateOrConnectWithoutFinishInput!]
  create: [FinishTranslationsCreateWithoutFinishInput!]
  createMany: FinishTranslationsCreateManyFinishInputEnvelope
  delete: [FinishTranslationsWhereUniqueInput!]
  deleteMany: [FinishTranslationsScalarWhereInput!]
  disconnect: [FinishTranslationsWhereUniqueInput!]
  set: [FinishTranslationsWhereUniqueInput!]
  update: [FinishTranslationsUpdateWithWhereUniqueWithoutFinishInput!]
  updateMany: [FinishTranslationsUpdateManyWithWhereWithoutFinishInput!]
  upsert: [FinishTranslationsUpsertWithWhereUniqueWithoutFinishInput!]
}

input FinishTranslationsUpdateWithWhereUniqueWithoutFinishInput {
  data: FinishTranslationsUpdateWithoutFinishInput!
  where: FinishTranslationsWhereUniqueInput!
}

input FinishTranslationsUpdateWithoutFinishInput {
  description: NullableStringFieldUpdateOperationsInput
  locale: EnumLocaleFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input FinishTranslationsUpsertWithWhereUniqueWithoutFinishInput {
  create: FinishTranslationsCreateWithoutFinishInput!
  update: FinishTranslationsUpdateWithoutFinishInput!
  where: FinishTranslationsWhereUniqueInput!
}

input FinishTranslationsWhereInput {
  AND: [FinishTranslationsWhereInput!]
  NOT: [FinishTranslationsWhereInput!]
  OR: [FinishTranslationsWhereInput!]
  description: StringNullableFilter
  finish: FinishWhereInput
  finishId: IntFilter
  id: IntFilter
  locale: EnumLocaleFilter
  name: StringFilter
}

input FinishTranslationsWhereUniqueInput {
  id: Int
}

input FinishUpdateOneRequiredWithoutCollectionFinishesInput {
  connect: FinishWhereUniqueInput
  connectOrCreate: FinishCreateOrConnectWithoutCollectionFinishesInput
  create: FinishCreateWithoutCollectionFinishesInput
  update: FinishUpdateWithoutCollectionFinishesInput
  upsert: FinishUpsertWithoutCollectionFinishesInput
}

input FinishUpdateOneRequiredWithoutModulesInput {
  connect: FinishWhereUniqueInput
  connectOrCreate: FinishCreateOrConnectWithoutModulesInput
  create: FinishCreateWithoutModulesInput
  update: FinishUpdateWithoutModulesInput
  upsert: FinishUpsertWithoutModulesInput
}

input FinishUpdateOneRequiredWithoutProjectsInput {
  connect: FinishWhereUniqueInput
  connectOrCreate: FinishCreateOrConnectWithoutProjectsInput
  create: FinishCreateWithoutProjectsInput
  update: FinishUpdateWithoutProjectsInput
  upsert: FinishUpsertWithoutProjectsInput
}

input FinishUpdateWithoutCollectionFinishesInput {
  modules: ModuleUpdateManyWithoutFinishInput
  projects: ProjectUpdateManyWithoutFinishInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  translations: FinishTranslationsUpdateManyWithoutFinishInput
}

input FinishUpdateWithoutModulesInput {
  collectionFinishes: CollectionFinishesUpdateManyWithoutFinishInput
  projects: ProjectUpdateManyWithoutFinishInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  translations: FinishTranslationsUpdateManyWithoutFinishInput
}

input FinishUpdateWithoutProjectsInput {
  collectionFinishes: CollectionFinishesUpdateManyWithoutFinishInput
  modules: ModuleUpdateManyWithoutFinishInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  translations: FinishTranslationsUpdateManyWithoutFinishInput
}

input FinishUpsertWithoutCollectionFinishesInput {
  create: FinishCreateWithoutCollectionFinishesInput!
  update: FinishUpdateWithoutCollectionFinishesInput!
}

input FinishUpsertWithoutModulesInput {
  create: FinishCreateWithoutModulesInput!
  update: FinishUpdateWithoutModulesInput!
}

input FinishUpsertWithoutProjectsInput {
  create: FinishCreateWithoutProjectsInput!
  update: FinishUpdateWithoutProjectsInput!
}

input FinishWhereInput {
  AND: [FinishWhereInput!]
  NOT: [FinishWhereInput!]
  OR: [FinishWhereInput!]
  collectionFinishes: CollectionFinishesListRelationFilter
  id: IntFilter
  modules: ModuleListRelationFilter
  projects: ProjectListRelationFilter
  slug: StringFilter
  thumbnailUrl: StringNullableFilter
  translations: FinishTranslationsListRelationFilter
}

input FinishWhereUniqueInput {
  id: Int
  slug: String
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar Json

input JsonNullableFilter {
  equals: Json
  not: Json
}

enum Locale {
  en
  fr
}

type Module {
  bundleUrl: String
  categories(where: CategoryWhereInput): [Category!]!
  collection: Collection!
  collectionId: Int!
  description: String
  finish: Finish!
  finishId: Int!
  hasPegs: Boolean!
  id: Int!
  isImprintExtension: Boolean!
  isMat: Boolean!
  isSubmodule: Boolean!
  partNumber: String!
  projectModules(
    cursor: ProjectModuleWhereUniqueInput
    orderBy: [ProjectModuleOrderByInput!]
    skip: Int
    take: Int
    where: ProjectModuleWhereInput
  ): [ProjectModule!]!
  rules: ModuleRules
  thumbnailUrl: String
}

type ModuleCategory {
  category: Category!
  categoryId: Int!
  id: Int!
  module: Module!
  moduleId: Int!
}

input ModuleCategoryCreateManyModuleInput {
  categoryId: Int!
  id: Int
}

input ModuleCategoryCreateManyModuleInputEnvelope {
  data: [ModuleCategoryCreateManyModuleInput!]
  skipDuplicates: Boolean
}

input ModuleCategoryCreateNestedManyWithoutModuleInput {
  connect: [ModuleCategoryWhereUniqueInput!]
  connectOrCreate: [ModuleCategoryCreateOrConnectWithoutModuleInput!]
  create: [ModuleCategoryCreateWithoutModuleInput!]
  createMany: ModuleCategoryCreateManyModuleInputEnvelope
}

input ModuleCategoryCreateOrConnectWithoutModuleInput {
  create: ModuleCategoryCreateWithoutModuleInput!
  where: ModuleCategoryWhereUniqueInput!
}

input ModuleCategoryCreateWithoutModuleInput {
  category: CategoryCreateNestedOneWithoutModuleCategoriesInput!
}

input ModuleCategoryListRelationFilter {
  every: ModuleCategoryWhereInput
  none: ModuleCategoryWhereInput
  some: ModuleCategoryWhereInput
}

input ModuleCategoryOrderByInput {
  categoryId: SortOrder
  id: SortOrder
  moduleId: SortOrder
}

input ModuleCategoryScalarWhereInput {
  AND: [ModuleCategoryScalarWhereInput!]
  NOT: [ModuleCategoryScalarWhereInput!]
  OR: [ModuleCategoryScalarWhereInput!]
  categoryId: IntFilter
  id: IntFilter
  moduleId: IntFilter
}

input ModuleCategoryUpdateManyMutationInput {
  _: Int
}

input ModuleCategoryUpdateManyWithWhereWithoutModuleInput {
  data: ModuleCategoryUpdateManyMutationInput!
  where: ModuleCategoryScalarWhereInput!
}

input ModuleCategoryUpdateManyWithoutModuleInput {
  connect: [ModuleCategoryWhereUniqueInput!]
  connectOrCreate: [ModuleCategoryCreateOrConnectWithoutModuleInput!]
  create: [ModuleCategoryCreateWithoutModuleInput!]
  createMany: ModuleCategoryCreateManyModuleInputEnvelope
  delete: [ModuleCategoryWhereUniqueInput!]
  deleteMany: [ModuleCategoryScalarWhereInput!]
  disconnect: [ModuleCategoryWhereUniqueInput!]
  set: [ModuleCategoryWhereUniqueInput!]
  update: [ModuleCategoryUpdateWithWhereUniqueWithoutModuleInput!]
  updateMany: [ModuleCategoryUpdateManyWithWhereWithoutModuleInput!]
  upsert: [ModuleCategoryUpsertWithWhereUniqueWithoutModuleInput!]
}

input ModuleCategoryUpdateWithWhereUniqueWithoutModuleInput {
  data: ModuleCategoryUpdateWithoutModuleInput!
  where: ModuleCategoryWhereUniqueInput!
}

input ModuleCategoryUpdateWithoutModuleInput {
  category: CategoryUpdateOneRequiredWithoutModuleCategoriesInput
}

input ModuleCategoryUpsertWithWhereUniqueWithoutModuleInput {
  create: ModuleCategoryCreateWithoutModuleInput!
  update: ModuleCategoryUpdateWithoutModuleInput!
  where: ModuleCategoryWhereUniqueInput!
}

input ModuleCategoryWhereInput {
  AND: [ModuleCategoryWhereInput!]
  NOT: [ModuleCategoryWhereInput!]
  OR: [ModuleCategoryWhereInput!]
  category: CategoryWhereInput
  categoryId: IntFilter
  id: IntFilter
  module: ModuleWhereInput
  moduleId: IntFilter
}

input ModuleCategoryWhereUniqueInput {
  id: Int
}

input ModuleCreateManyCollectionInput {
  bundleUrl: String
  description: String
  finishId: Int!
  hasPegs: Boolean
  id: Int
  isImprintExtension: Boolean
  isMat: Boolean
  isSubmodule: Boolean
  partNumber: String!
  rules: Json
  thumbnailUrl: String
}

input ModuleCreateManyCollectionInputEnvelope {
  data: [ModuleCreateManyCollectionInput!]
  skipDuplicates: Boolean
}

input ModuleCreateManyFinishInput {
  bundleUrl: String
  collectionId: Int!
  description: String
  hasPegs: Boolean
  id: Int
  isImprintExtension: Boolean
  isMat: Boolean
  isSubmodule: Boolean
  partNumber: String!
  rules: Json
  thumbnailUrl: String
}

input ModuleCreateManyFinishInputEnvelope {
  data: [ModuleCreateManyFinishInput!]
  skipDuplicates: Boolean
}

input ModuleCreateNestedManyWithoutCollectionInput {
  connect: [ModuleWhereUniqueInput!]
  connectOrCreate: [ModuleCreateOrConnectWithoutCollectionInput!]
  create: [ModuleCreateWithoutCollectionInput!]
  createMany: ModuleCreateManyCollectionInputEnvelope
}

input ModuleCreateNestedManyWithoutFinishInput {
  connect: [ModuleWhereUniqueInput!]
  connectOrCreate: [ModuleCreateOrConnectWithoutFinishInput!]
  create: [ModuleCreateWithoutFinishInput!]
  createMany: ModuleCreateManyFinishInputEnvelope
}

input ModuleCreateNestedOneWithoutProjectModulesInput {
  connect: ModuleWhereUniqueInput
  connectOrCreate: ModuleCreateOrConnectWithoutProjectModulesInput
  create: ModuleCreateWithoutProjectModulesInput
}

input ModuleCreateOrConnectWithoutCollectionInput {
  create: ModuleCreateWithoutCollectionInput!
  where: ModuleWhereUniqueInput!
}

input ModuleCreateOrConnectWithoutFinishInput {
  create: ModuleCreateWithoutFinishInput!
  where: ModuleWhereUniqueInput!
}

input ModuleCreateOrConnectWithoutProjectModulesInput {
  create: ModuleCreateWithoutProjectModulesInput!
  where: ModuleWhereUniqueInput!
}

input ModuleCreateWithoutCollectionInput {
  bundleUrl: String
  description: String
  finish: FinishCreateNestedOneWithoutModulesInput!
  hasPegs: Boolean
  isImprintExtension: Boolean
  isMat: Boolean
  isSubmodule: Boolean
  moduleCategories: ModuleCategoryCreateNestedManyWithoutModuleInput
  partNumber: String!
  projectModules: ProjectModuleCreateNestedManyWithoutModuleInput
  rules: Json
  thumbnailUrl: String
}

input ModuleCreateWithoutFinishInput {
  bundleUrl: String
  collection: CollectionCreateNestedOneWithoutModulesInput!
  description: String
  hasPegs: Boolean
  isImprintExtension: Boolean
  isMat: Boolean
  isSubmodule: Boolean
  moduleCategories: ModuleCategoryCreateNestedManyWithoutModuleInput
  partNumber: String!
  projectModules: ProjectModuleCreateNestedManyWithoutModuleInput
  rules: Json
  thumbnailUrl: String
}

input ModuleCreateWithoutProjectModulesInput {
  bundleUrl: String
  collection: CollectionCreateNestedOneWithoutModulesInput!
  description: String
  finish: FinishCreateNestedOneWithoutModulesInput!
  hasPegs: Boolean
  isImprintExtension: Boolean
  isMat: Boolean
  isSubmodule: Boolean
  moduleCategories: ModuleCategoryCreateNestedManyWithoutModuleInput
  partNumber: String!
  rules: Json
  thumbnailUrl: String
}

type ModuleDimension {
  depth: ModuleMinMax
  height: ModuleUnit
  width: ModuleMinMax
}

type ModuleExtensionsMetadata {
  left: String
  options: [String!]
  right: String
}

input ModuleListRelationFilter {
  every: ModuleWhereInput
  none: ModuleWhereInput
  some: ModuleWhereInput
}

type ModuleMinMax {
  max: ModuleUnit
  min: ModuleUnit
}

input ModuleOrderByInput {
  bundleUrl: SortOrder
  collectionId: SortOrder
  description: SortOrder
  finishId: SortOrder
  hasPegs: SortOrder
  id: SortOrder
  isImprintExtension: SortOrder
  isMat: SortOrder
  isSubmodule: SortOrder
  partNumber: SortOrder
  rules: SortOrder
  thumbnailUrl: SortOrder
}

type ModuleRules {
  dimensions: ModuleDimension

  """
  Extensions are sub pieces that MUST BE CONNECTED to the main product or other extension.
  """
  extensions: ModuleExtensionsMetadata

  """
  Modules that are basically this module but in a different finish(color), to allow the ui to easily switch between them
  """
  finishes: [String!]

  """
  The module part number, probably equivalent to the module id
  """
  partNumber: String!
  rules: ModuleRulesMetadata

  """
  Different types of edges a module might have
  """
  trims: [String!]
}

type ModuleRulesMetadata {
  """
  Whether or not this module is only valid if it's taking the drawer full depth
  """
  fullDepth: Boolean

  """
  Options are which other modules can be put IN modules
  """
  options: [String!]

  """
  The product can only be put inside the drawer, if the current net interior of the drawer belongs to the range of the piece
  """
  requiredNetInterior: ModuleMinMax

  """
  The amount (in degrees) that the product can be rotated
  """
  rotation: Float

  """
  Where a module can be cut if there's excess beyond the drawer
  """
  trimmable: [String!]
}

input ModuleScalarWhereInput {
  AND: [ModuleScalarWhereInput!]
  NOT: [ModuleScalarWhereInput!]
  OR: [ModuleScalarWhereInput!]
  bundleUrl: StringNullableFilter
  collectionId: IntFilter
  description: StringNullableFilter
  finishId: IntFilter
  hasPegs: BoolFilter
  id: IntFilter
  isImprintExtension: BoolFilter
  isMat: BoolFilter
  isSubmodule: BoolFilter
  partNumber: StringFilter
  rules: JsonNullableFilter
  thumbnailUrl: StringNullableFilter
}

type ModuleUnit {
  inches: String
  millimeters: Float!
}

input ModuleUpdateManyMutationInput {
  bundleUrl: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  isImprintExtension: BoolFieldUpdateOperationsInput
  isMat: BoolFieldUpdateOperationsInput
  isSubmodule: BoolFieldUpdateOperationsInput
  partNumber: StringFieldUpdateOperationsInput
  rules: Json
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
}

input ModuleUpdateManyWithWhereWithoutCollectionInput {
  data: ModuleUpdateManyMutationInput!
  where: ModuleScalarWhereInput!
}

input ModuleUpdateManyWithWhereWithoutFinishInput {
  data: ModuleUpdateManyMutationInput!
  where: ModuleScalarWhereInput!
}

input ModuleUpdateManyWithoutCollectionInput {
  connect: [ModuleWhereUniqueInput!]
  connectOrCreate: [ModuleCreateOrConnectWithoutCollectionInput!]
  create: [ModuleCreateWithoutCollectionInput!]
  createMany: ModuleCreateManyCollectionInputEnvelope
  delete: [ModuleWhereUniqueInput!]
  deleteMany: [ModuleScalarWhereInput!]
  disconnect: [ModuleWhereUniqueInput!]
  set: [ModuleWhereUniqueInput!]
  update: [ModuleUpdateWithWhereUniqueWithoutCollectionInput!]
  updateMany: [ModuleUpdateManyWithWhereWithoutCollectionInput!]
  upsert: [ModuleUpsertWithWhereUniqueWithoutCollectionInput!]
}

input ModuleUpdateManyWithoutFinishInput {
  connect: [ModuleWhereUniqueInput!]
  connectOrCreate: [ModuleCreateOrConnectWithoutFinishInput!]
  create: [ModuleCreateWithoutFinishInput!]
  createMany: ModuleCreateManyFinishInputEnvelope
  delete: [ModuleWhereUniqueInput!]
  deleteMany: [ModuleScalarWhereInput!]
  disconnect: [ModuleWhereUniqueInput!]
  set: [ModuleWhereUniqueInput!]
  update: [ModuleUpdateWithWhereUniqueWithoutFinishInput!]
  updateMany: [ModuleUpdateManyWithWhereWithoutFinishInput!]
  upsert: [ModuleUpsertWithWhereUniqueWithoutFinishInput!]
}

input ModuleUpdateOneRequiredWithoutProjectModulesInput {
  connect: ModuleWhereUniqueInput
  connectOrCreate: ModuleCreateOrConnectWithoutProjectModulesInput
  create: ModuleCreateWithoutProjectModulesInput
  update: ModuleUpdateWithoutProjectModulesInput
  upsert: ModuleUpsertWithoutProjectModulesInput
}

input ModuleUpdateWithWhereUniqueWithoutCollectionInput {
  data: ModuleUpdateWithoutCollectionInput!
  where: ModuleWhereUniqueInput!
}

input ModuleUpdateWithWhereUniqueWithoutFinishInput {
  data: ModuleUpdateWithoutFinishInput!
  where: ModuleWhereUniqueInput!
}

input ModuleUpdateWithoutCollectionInput {
  bundleUrl: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  finish: FinishUpdateOneRequiredWithoutModulesInput
  hasPegs: BoolFieldUpdateOperationsInput
  isImprintExtension: BoolFieldUpdateOperationsInput
  isMat: BoolFieldUpdateOperationsInput
  isSubmodule: BoolFieldUpdateOperationsInput
  moduleCategories: ModuleCategoryUpdateManyWithoutModuleInput
  partNumber: StringFieldUpdateOperationsInput
  projectModules: ProjectModuleUpdateManyWithoutModuleInput
  rules: Json
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
}

input ModuleUpdateWithoutFinishInput {
  bundleUrl: NullableStringFieldUpdateOperationsInput
  collection: CollectionUpdateOneRequiredWithoutModulesInput
  description: NullableStringFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  isImprintExtension: BoolFieldUpdateOperationsInput
  isMat: BoolFieldUpdateOperationsInput
  isSubmodule: BoolFieldUpdateOperationsInput
  moduleCategories: ModuleCategoryUpdateManyWithoutModuleInput
  partNumber: StringFieldUpdateOperationsInput
  projectModules: ProjectModuleUpdateManyWithoutModuleInput
  rules: Json
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
}

input ModuleUpdateWithoutProjectModulesInput {
  bundleUrl: NullableStringFieldUpdateOperationsInput
  collection: CollectionUpdateOneRequiredWithoutModulesInput
  description: NullableStringFieldUpdateOperationsInput
  finish: FinishUpdateOneRequiredWithoutModulesInput
  hasPegs: BoolFieldUpdateOperationsInput
  isImprintExtension: BoolFieldUpdateOperationsInput
  isMat: BoolFieldUpdateOperationsInput
  isSubmodule: BoolFieldUpdateOperationsInput
  moduleCategories: ModuleCategoryUpdateManyWithoutModuleInput
  partNumber: StringFieldUpdateOperationsInput
  rules: Json
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
}

input ModuleUpsertWithWhereUniqueWithoutCollectionInput {
  create: ModuleCreateWithoutCollectionInput!
  update: ModuleUpdateWithoutCollectionInput!
  where: ModuleWhereUniqueInput!
}

input ModuleUpsertWithWhereUniqueWithoutFinishInput {
  create: ModuleCreateWithoutFinishInput!
  update: ModuleUpdateWithoutFinishInput!
  where: ModuleWhereUniqueInput!
}

input ModuleUpsertWithoutProjectModulesInput {
  create: ModuleCreateWithoutProjectModulesInput!
  update: ModuleUpdateWithoutProjectModulesInput!
}

input ModuleWhereInput {
  AND: [ModuleWhereInput!]
  NOT: [ModuleWhereInput!]
  OR: [ModuleWhereInput!]
  bundleUrl: StringNullableFilter
  collection: CollectionWhereInput
  collectionId: IntFilter
  description: StringNullableFilter
  finish: FinishWhereInput
  finishId: IntFilter
  hasPegs: BoolFilter
  id: IntFilter
  isImprintExtension: BoolFilter
  isMat: BoolFilter
  isSubmodule: BoolFilter
  moduleCategories: ModuleCategoryListRelationFilter
  partNumber: StringFilter
  projectModules: ProjectModuleListRelationFilter
  rules: JsonNullableFilter
  thumbnailUrl: StringNullableFilter
}

input ModuleWhereUniqueInput {
  id: Int
  partNumber: String
}

type Mutation {
  createOneProject(data: ProjectCreateInput!): Project!
  createOneProjectModule(data: ProjectModuleCreateInput!): ProjectModule!
  deleteManyProjectModule(where: ProjectModuleWhereInput): AffectedRowsOutput!
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  deleteOneProjectModule(where: ProjectModuleWhereUniqueInput!): ProjectModule
  login(user: UserSingIn!): Session
  updateManyProjectModule(
    data: ProjectModuleUpdateManyMutationInput!
    where: ProjectModuleWhereInput
  ): AffectedRowsOutput!
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateOneProjectModule(data: ProjectModuleUpdateInput!, where: ProjectModuleWhereUniqueInput!): ProjectModule
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedEnumLocaleFilter {
  equals: Locale
  in: [Locale!]
  not: NestedEnumLocaleFilter
  notIn: [Locale!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Project {
  collection: Collection!
  collectionId: Int!
  finish: Finish!
  finishId: Int!
  gable: Float!
  hasPegs: Boolean!
  id: Int!
  modules: [Module!]!
  projectModules(cursor: ProjectModuleWhereUniqueInput, skip: Int, take: Int): [ProjectModule!]!
  slide: Slide!
  slideDepth: SlideDepth!
  slideDepthId: Int!
  slideId: Int!
  slug: String!
  title: String!
  type: Type!
  typeId: Int!
  user: User
  userId: Int
  width: Float!
}

input ProjectCreateInput {
  collection: CollectionCreateNestedOneWithoutProjectsInput!
  finish: FinishCreateNestedOneWithoutProjectsInput!
  gable: Float!
  hasPegs: Boolean
  projectModules: ProjectModuleCreateNestedManyWithoutProjectInput
  slide: SlideCreateNestedOneWithoutProjectsInput!
  slideDepth: SlideDepthCreateNestedOneWithoutProjectsInput!
  slug: String!
  title: String!
  type: TypeCreateNestedOneWithoutProjectsInput!
  user: UserCreateNestedOneWithoutProjectInput
  width: Float!
}

input ProjectCreateManyCollectionInput {
  finishId: Int!
  gable: Float!
  hasPegs: Boolean
  id: Int
  slideDepthId: Int!
  slideId: Int!
  slug: String!
  title: String!
  typeId: Int!
  userId: Int
  width: Float!
}

input ProjectCreateManyCollectionInputEnvelope {
  data: [ProjectCreateManyCollectionInput!]
  skipDuplicates: Boolean
}

input ProjectCreateManyFinishInput {
  collectionId: Int!
  gable: Float!
  hasPegs: Boolean
  id: Int
  slideDepthId: Int!
  slideId: Int!
  slug: String!
  title: String!
  typeId: Int!
  userId: Int
  width: Float!
}

input ProjectCreateManyFinishInputEnvelope {
  data: [ProjectCreateManyFinishInput!]
  skipDuplicates: Boolean
}

input ProjectCreateManySlideDepthInput {
  collectionId: Int!
  finishId: Int!
  gable: Float!
  hasPegs: Boolean
  id: Int
  slideId: Int!
  slug: String!
  title: String!
  typeId: Int!
  userId: Int
  width: Float!
}

input ProjectCreateManySlideDepthInputEnvelope {
  data: [ProjectCreateManySlideDepthInput!]
  skipDuplicates: Boolean
}

input ProjectCreateManySlideInput {
  collectionId: Int!
  finishId: Int!
  gable: Float!
  hasPegs: Boolean
  id: Int
  slideDepthId: Int!
  slug: String!
  title: String!
  typeId: Int!
  userId: Int
  width: Float!
}

input ProjectCreateManySlideInputEnvelope {
  data: [ProjectCreateManySlideInput!]
  skipDuplicates: Boolean
}

input ProjectCreateNestedManyWithoutCollectionInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutCollectionInput!]
  create: [ProjectCreateWithoutCollectionInput!]
  createMany: ProjectCreateManyCollectionInputEnvelope
}

input ProjectCreateNestedManyWithoutFinishInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutFinishInput!]
  create: [ProjectCreateWithoutFinishInput!]
  createMany: ProjectCreateManyFinishInputEnvelope
}

input ProjectCreateNestedManyWithoutSlideDepthInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSlideDepthInput!]
  create: [ProjectCreateWithoutSlideDepthInput!]
  createMany: ProjectCreateManySlideDepthInputEnvelope
}

input ProjectCreateNestedManyWithoutSlideInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSlideInput!]
  create: [ProjectCreateWithoutSlideInput!]
  createMany: ProjectCreateManySlideInputEnvelope
}

input ProjectCreateNestedOneWithoutProjectModulesInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutProjectModulesInput
  create: ProjectCreateWithoutProjectModulesInput
}

input ProjectCreateOrConnectWithoutCollectionInput {
  create: ProjectCreateWithoutCollectionInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutFinishInput {
  create: ProjectCreateWithoutFinishInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutProjectModulesInput {
  create: ProjectCreateWithoutProjectModulesInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutSlideDepthInput {
  create: ProjectCreateWithoutSlideDepthInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutSlideInput {
  create: ProjectCreateWithoutSlideInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutCollectionInput {
  finish: FinishCreateNestedOneWithoutProjectsInput!
  gable: Float!
  hasPegs: Boolean
  projectModules: ProjectModuleCreateNestedManyWithoutProjectInput
  slide: SlideCreateNestedOneWithoutProjectsInput!
  slideDepth: SlideDepthCreateNestedOneWithoutProjectsInput!
  slug: String!
  title: String!
  type: TypeCreateNestedOneWithoutProjectsInput!
  user: UserCreateNestedOneWithoutProjectInput
  width: Float!
}

input ProjectCreateWithoutFinishInput {
  collection: CollectionCreateNestedOneWithoutProjectsInput!
  gable: Float!
  hasPegs: Boolean
  projectModules: ProjectModuleCreateNestedManyWithoutProjectInput
  slide: SlideCreateNestedOneWithoutProjectsInput!
  slideDepth: SlideDepthCreateNestedOneWithoutProjectsInput!
  slug: String!
  title: String!
  type: TypeCreateNestedOneWithoutProjectsInput!
  user: UserCreateNestedOneWithoutProjectInput
  width: Float!
}

input ProjectCreateWithoutProjectModulesInput {
  collection: CollectionCreateNestedOneWithoutProjectsInput!
  finish: FinishCreateNestedOneWithoutProjectsInput!
  gable: Float!
  hasPegs: Boolean
  slide: SlideCreateNestedOneWithoutProjectsInput!
  slideDepth: SlideDepthCreateNestedOneWithoutProjectsInput!
  slug: String!
  title: String!
  type: TypeCreateNestedOneWithoutProjectsInput!
  user: UserCreateNestedOneWithoutProjectInput
  width: Float!
}

input ProjectCreateWithoutSlideDepthInput {
  collection: CollectionCreateNestedOneWithoutProjectsInput!
  finish: FinishCreateNestedOneWithoutProjectsInput!
  gable: Float!
  hasPegs: Boolean
  projectModules: ProjectModuleCreateNestedManyWithoutProjectInput
  slide: SlideCreateNestedOneWithoutProjectsInput!
  slug: String!
  title: String!
  type: TypeCreateNestedOneWithoutProjectsInput!
  user: UserCreateNestedOneWithoutProjectInput
  width: Float!
}

input ProjectCreateWithoutSlideInput {
  collection: CollectionCreateNestedOneWithoutProjectsInput!
  finish: FinishCreateNestedOneWithoutProjectsInput!
  gable: Float!
  hasPegs: Boolean
  projectModules: ProjectModuleCreateNestedManyWithoutProjectInput
  slideDepth: SlideDepthCreateNestedOneWithoutProjectsInput!
  slug: String!
  title: String!
  type: TypeCreateNestedOneWithoutProjectsInput!
  user: UserCreateNestedOneWithoutProjectInput
  width: Float!
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

type ProjectModule {
  children(cursor: ProjectModuleWhereUniqueInput, skip: Int, take: Int): [ProjectModule!]!
  id: Int!
  module: Module!
  moduleId: Int!
  parent: ProjectModule
  parentId: Int
  posX: Float!
  posY: Float!
  posZ: Float!
  project: Project
  projectId: Int
  rotY: Float!
}

input ProjectModuleCreateInput {
  children: ProjectModuleCreateNestedManyWithoutParentInput
  module: ModuleCreateNestedOneWithoutProjectModulesInput!
  parent: ProjectModuleCreateNestedOneWithoutChildrenInput
  posX: Float
  posY: Float
  posZ: Float
  project: ProjectCreateNestedOneWithoutProjectModulesInput
  rotY: Float
}

input ProjectModuleCreateManyModuleInput {
  id: Int
  parentId: Int
  posX: Float
  posY: Float
  posZ: Float
  projectId: Int
  rotY: Float
}

input ProjectModuleCreateManyModuleInputEnvelope {
  data: [ProjectModuleCreateManyModuleInput!]
  skipDuplicates: Boolean
}

input ProjectModuleCreateManyParentInput {
  id: Int
  moduleId: Int!
  posX: Float
  posY: Float
  posZ: Float
  projectId: Int
  rotY: Float
}

input ProjectModuleCreateManyParentInputEnvelope {
  data: [ProjectModuleCreateManyParentInput!]
  skipDuplicates: Boolean
}

input ProjectModuleCreateManyProjectInput {
  id: Int
  moduleId: Int!
  parentId: Int
  posX: Float
  posY: Float
  posZ: Float
  rotY: Float
}

input ProjectModuleCreateManyProjectInputEnvelope {
  data: [ProjectModuleCreateManyProjectInput!]
  skipDuplicates: Boolean
}

input ProjectModuleCreateNestedManyWithoutModuleInput {
  connect: [ProjectModuleWhereUniqueInput!]
  connectOrCreate: [ProjectModuleCreateOrConnectWithoutModuleInput!]
  create: [ProjectModuleCreateWithoutModuleInput!]
  createMany: ProjectModuleCreateManyModuleInputEnvelope
}

input ProjectModuleCreateNestedManyWithoutParentInput {
  connect: [ProjectModuleWhereUniqueInput!]
  connectOrCreate: [ProjectModuleCreateOrConnectWithoutParentInput!]
  create: [ProjectModuleCreateWithoutParentInput!]
  createMany: ProjectModuleCreateManyParentInputEnvelope
}

input ProjectModuleCreateNestedManyWithoutProjectInput {
  connect: [ProjectModuleWhereUniqueInput!]
  connectOrCreate: [ProjectModuleCreateOrConnectWithoutProjectInput!]
  create: [ProjectModuleCreateWithoutProjectInput!]
  createMany: ProjectModuleCreateManyProjectInputEnvelope
}

input ProjectModuleCreateNestedOneWithoutChildrenInput {
  connect: ProjectModuleWhereUniqueInput
  connectOrCreate: ProjectModuleCreateOrConnectWithoutChildrenInput
  create: ProjectModuleCreateWithoutChildrenInput
}

input ProjectModuleCreateOrConnectWithoutChildrenInput {
  create: ProjectModuleCreateWithoutChildrenInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleCreateOrConnectWithoutModuleInput {
  create: ProjectModuleCreateWithoutModuleInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleCreateOrConnectWithoutParentInput {
  create: ProjectModuleCreateWithoutParentInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleCreateOrConnectWithoutProjectInput {
  create: ProjectModuleCreateWithoutProjectInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleCreateWithoutChildrenInput {
  module: ModuleCreateNestedOneWithoutProjectModulesInput!
  parent: ProjectModuleCreateNestedOneWithoutChildrenInput
  posX: Float
  posY: Float
  posZ: Float
  project: ProjectCreateNestedOneWithoutProjectModulesInput
  rotY: Float
}

input ProjectModuleCreateWithoutModuleInput {
  children: ProjectModuleCreateNestedManyWithoutParentInput
  parent: ProjectModuleCreateNestedOneWithoutChildrenInput
  posX: Float
  posY: Float
  posZ: Float
  project: ProjectCreateNestedOneWithoutProjectModulesInput
  rotY: Float
}

input ProjectModuleCreateWithoutParentInput {
  children: ProjectModuleCreateNestedManyWithoutParentInput
  module: ModuleCreateNestedOneWithoutProjectModulesInput!
  posX: Float
  posY: Float
  posZ: Float
  project: ProjectCreateNestedOneWithoutProjectModulesInput
  rotY: Float
}

input ProjectModuleCreateWithoutProjectInput {
  children: ProjectModuleCreateNestedManyWithoutParentInput
  module: ModuleCreateNestedOneWithoutProjectModulesInput!
  parent: ProjectModuleCreateNestedOneWithoutChildrenInput
  posX: Float
  posY: Float
  posZ: Float
  rotY: Float
}

input ProjectModuleListRelationFilter {
  every: ProjectModuleWhereInput
  none: ProjectModuleWhereInput
  some: ProjectModuleWhereInput
}

input ProjectModuleOrderByInput {
  id: SortOrder
  moduleId: SortOrder
  parentId: SortOrder
  posX: SortOrder
  posY: SortOrder
  posZ: SortOrder
  projectId: SortOrder
  rotY: SortOrder
}

input ProjectModuleScalarWhereInput {
  AND: [ProjectModuleScalarWhereInput!]
  NOT: [ProjectModuleScalarWhereInput!]
  OR: [ProjectModuleScalarWhereInput!]
  id: IntFilter
  moduleId: IntFilter
  parentId: IntNullableFilter
  posX: FloatFilter
  posY: FloatFilter
  posZ: FloatFilter
  projectId: IntNullableFilter
  rotY: FloatFilter
}

input ProjectModuleUpdateInput {
  children: ProjectModuleUpdateManyWithoutParentInput
  module: ModuleUpdateOneRequiredWithoutProjectModulesInput
  parent: ProjectModuleUpdateOneWithoutChildrenInput
  posX: FloatFieldUpdateOperationsInput
  posY: FloatFieldUpdateOperationsInput
  posZ: FloatFieldUpdateOperationsInput
  project: ProjectUpdateOneWithoutProjectModulesInput
  rotY: FloatFieldUpdateOperationsInput
}

input ProjectModuleUpdateManyMutationInput {
  posX: FloatFieldUpdateOperationsInput
  posY: FloatFieldUpdateOperationsInput
  posZ: FloatFieldUpdateOperationsInput
  rotY: FloatFieldUpdateOperationsInput
}

input ProjectModuleUpdateManyWithWhereWithoutModuleInput {
  data: ProjectModuleUpdateManyMutationInput!
  where: ProjectModuleScalarWhereInput!
}

input ProjectModuleUpdateManyWithWhereWithoutParentInput {
  data: ProjectModuleUpdateManyMutationInput!
  where: ProjectModuleScalarWhereInput!
}

input ProjectModuleUpdateManyWithWhereWithoutProjectInput {
  data: ProjectModuleUpdateManyMutationInput!
  where: ProjectModuleScalarWhereInput!
}

input ProjectModuleUpdateManyWithoutModuleInput {
  connect: [ProjectModuleWhereUniqueInput!]
  connectOrCreate: [ProjectModuleCreateOrConnectWithoutModuleInput!]
  create: [ProjectModuleCreateWithoutModuleInput!]
  createMany: ProjectModuleCreateManyModuleInputEnvelope
  delete: [ProjectModuleWhereUniqueInput!]
  deleteMany: [ProjectModuleScalarWhereInput!]
  disconnect: [ProjectModuleWhereUniqueInput!]
  set: [ProjectModuleWhereUniqueInput!]
  update: [ProjectModuleUpdateWithWhereUniqueWithoutModuleInput!]
  updateMany: [ProjectModuleUpdateManyWithWhereWithoutModuleInput!]
  upsert: [ProjectModuleUpsertWithWhereUniqueWithoutModuleInput!]
}

input ProjectModuleUpdateManyWithoutParentInput {
  connect: [ProjectModuleWhereUniqueInput!]
  connectOrCreate: [ProjectModuleCreateOrConnectWithoutParentInput!]
  create: [ProjectModuleCreateWithoutParentInput!]
  createMany: ProjectModuleCreateManyParentInputEnvelope
  delete: [ProjectModuleWhereUniqueInput!]
  deleteMany: [ProjectModuleScalarWhereInput!]
  disconnect: [ProjectModuleWhereUniqueInput!]
  set: [ProjectModuleWhereUniqueInput!]
  update: [ProjectModuleUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [ProjectModuleUpdateManyWithWhereWithoutParentInput!]
  upsert: [ProjectModuleUpsertWithWhereUniqueWithoutParentInput!]
}

input ProjectModuleUpdateManyWithoutProjectInput {
  connect: [ProjectModuleWhereUniqueInput!]
  connectOrCreate: [ProjectModuleCreateOrConnectWithoutProjectInput!]
  create: [ProjectModuleCreateWithoutProjectInput!]
  createMany: ProjectModuleCreateManyProjectInputEnvelope
  delete: [ProjectModuleWhereUniqueInput!]
  deleteMany: [ProjectModuleScalarWhereInput!]
  disconnect: [ProjectModuleWhereUniqueInput!]
  set: [ProjectModuleWhereUniqueInput!]
  update: [ProjectModuleUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectModuleUpdateManyWithWhereWithoutProjectInput!]
  upsert: [ProjectModuleUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectModuleUpdateOneWithoutChildrenInput {
  connect: ProjectModuleWhereUniqueInput
  connectOrCreate: ProjectModuleCreateOrConnectWithoutChildrenInput
  create: ProjectModuleCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectModuleUpdateWithoutChildrenInput
  upsert: ProjectModuleUpsertWithoutChildrenInput
}

input ProjectModuleUpdateWithWhereUniqueWithoutModuleInput {
  data: ProjectModuleUpdateWithoutModuleInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleUpdateWithWhereUniqueWithoutParentInput {
  data: ProjectModuleUpdateWithoutParentInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectModuleUpdateWithoutProjectInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleUpdateWithoutChildrenInput {
  module: ModuleUpdateOneRequiredWithoutProjectModulesInput
  parent: ProjectModuleUpdateOneWithoutChildrenInput
  posX: FloatFieldUpdateOperationsInput
  posY: FloatFieldUpdateOperationsInput
  posZ: FloatFieldUpdateOperationsInput
  project: ProjectUpdateOneWithoutProjectModulesInput
  rotY: FloatFieldUpdateOperationsInput
}

input ProjectModuleUpdateWithoutModuleInput {
  children: ProjectModuleUpdateManyWithoutParentInput
  parent: ProjectModuleUpdateOneWithoutChildrenInput
  posX: FloatFieldUpdateOperationsInput
  posY: FloatFieldUpdateOperationsInput
  posZ: FloatFieldUpdateOperationsInput
  project: ProjectUpdateOneWithoutProjectModulesInput
  rotY: FloatFieldUpdateOperationsInput
}

input ProjectModuleUpdateWithoutParentInput {
  children: ProjectModuleUpdateManyWithoutParentInput
  module: ModuleUpdateOneRequiredWithoutProjectModulesInput
  posX: FloatFieldUpdateOperationsInput
  posY: FloatFieldUpdateOperationsInput
  posZ: FloatFieldUpdateOperationsInput
  project: ProjectUpdateOneWithoutProjectModulesInput
  rotY: FloatFieldUpdateOperationsInput
}

input ProjectModuleUpdateWithoutProjectInput {
  children: ProjectModuleUpdateManyWithoutParentInput
  module: ModuleUpdateOneRequiredWithoutProjectModulesInput
  parent: ProjectModuleUpdateOneWithoutChildrenInput
  posX: FloatFieldUpdateOperationsInput
  posY: FloatFieldUpdateOperationsInput
  posZ: FloatFieldUpdateOperationsInput
  rotY: FloatFieldUpdateOperationsInput
}

input ProjectModuleUpsertWithWhereUniqueWithoutModuleInput {
  create: ProjectModuleCreateWithoutModuleInput!
  update: ProjectModuleUpdateWithoutModuleInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleUpsertWithWhereUniqueWithoutParentInput {
  create: ProjectModuleCreateWithoutParentInput!
  update: ProjectModuleUpdateWithoutParentInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectModuleCreateWithoutProjectInput!
  update: ProjectModuleUpdateWithoutProjectInput!
  where: ProjectModuleWhereUniqueInput!
}

input ProjectModuleUpsertWithoutChildrenInput {
  create: ProjectModuleCreateWithoutChildrenInput!
  update: ProjectModuleUpdateWithoutChildrenInput!
}

input ProjectModuleWhereInput {
  AND: [ProjectModuleWhereInput!]
  NOT: [ProjectModuleWhereInput!]
  OR: [ProjectModuleWhereInput!]
  children: ProjectModuleListRelationFilter
  id: IntFilter
  module: ModuleWhereInput
  moduleId: IntFilter
  parent: ProjectModuleWhereInput
  parentId: IntNullableFilter
  posX: FloatFilter
  posY: FloatFilter
  posZ: FloatFilter
  project: ProjectWhereInput
  projectId: IntNullableFilter
  rotY: FloatFilter
}

input ProjectModuleWhereUniqueInput {
  id: Int
}

input ProjectOrderByInput {
  collectionId: SortOrder
  finishId: SortOrder
  gable: SortOrder
  hasPegs: SortOrder
  id: SortOrder
  slideDepthId: SortOrder
  slideId: SortOrder
  slug: SortOrder
  title: SortOrder
  typeId: SortOrder
  userId: SortOrder
  width: SortOrder
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  collectionId: IntFilter
  finishId: IntFilter
  gable: FloatFilter
  hasPegs: BoolFilter
  id: IntFilter
  slideDepthId: IntFilter
  slideId: IntFilter
  slug: StringFilter
  title: StringFilter
  typeId: IntFilter
  userId: IntNullableFilter
  width: FloatFilter
}

input ProjectUpdateInput {
  collection: CollectionUpdateOneRequiredWithoutProjectsInput
  finish: FinishUpdateOneRequiredWithoutProjectsInput
  gable: FloatFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  projectModules: ProjectModuleUpdateManyWithoutProjectInput
  slide: SlideUpdateOneRequiredWithoutProjectsInput
  slideDepth: SlideDepthUpdateOneRequiredWithoutProjectsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: TypeUpdateOneRequiredWithoutProjectsInput
  user: UserUpdateOneWithoutProjectInput
  width: FloatFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  gable: FloatFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  width: FloatFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutCollectionInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithWhereWithoutFinishInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithWhereWithoutSlideDepthInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithWhereWithoutSlideInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutCollectionInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutCollectionInput!]
  create: [ProjectCreateWithoutCollectionInput!]
  createMany: ProjectCreateManyCollectionInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutCollectionInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutCollectionInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutCollectionInput!]
}

input ProjectUpdateManyWithoutFinishInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutFinishInput!]
  create: [ProjectCreateWithoutFinishInput!]
  createMany: ProjectCreateManyFinishInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutFinishInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutFinishInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutFinishInput!]
}

input ProjectUpdateManyWithoutSlideDepthInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSlideDepthInput!]
  create: [ProjectCreateWithoutSlideDepthInput!]
  createMany: ProjectCreateManySlideDepthInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutSlideDepthInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutSlideDepthInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutSlideDepthInput!]
}

input ProjectUpdateManyWithoutSlideInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSlideInput!]
  create: [ProjectCreateWithoutSlideInput!]
  createMany: ProjectCreateManySlideInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutSlideInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutSlideInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutSlideInput!]
}

input ProjectUpdateOneWithoutProjectModulesInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutProjectModulesInput
  create: ProjectCreateWithoutProjectModulesInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutProjectModulesInput
  upsert: ProjectUpsertWithoutProjectModulesInput
}

input ProjectUpdateWithWhereUniqueWithoutCollectionInput {
  data: ProjectUpdateWithoutCollectionInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutFinishInput {
  data: ProjectUpdateWithoutFinishInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutSlideDepthInput {
  data: ProjectUpdateWithoutSlideDepthInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutSlideInput {
  data: ProjectUpdateWithoutSlideInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutCollectionInput {
  finish: FinishUpdateOneRequiredWithoutProjectsInput
  gable: FloatFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  projectModules: ProjectModuleUpdateManyWithoutProjectInput
  slide: SlideUpdateOneRequiredWithoutProjectsInput
  slideDepth: SlideDepthUpdateOneRequiredWithoutProjectsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: TypeUpdateOneRequiredWithoutProjectsInput
  user: UserUpdateOneWithoutProjectInput
  width: FloatFieldUpdateOperationsInput
}

input ProjectUpdateWithoutFinishInput {
  collection: CollectionUpdateOneRequiredWithoutProjectsInput
  gable: FloatFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  projectModules: ProjectModuleUpdateManyWithoutProjectInput
  slide: SlideUpdateOneRequiredWithoutProjectsInput
  slideDepth: SlideDepthUpdateOneRequiredWithoutProjectsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: TypeUpdateOneRequiredWithoutProjectsInput
  user: UserUpdateOneWithoutProjectInput
  width: FloatFieldUpdateOperationsInput
}

input ProjectUpdateWithoutProjectModulesInput {
  collection: CollectionUpdateOneRequiredWithoutProjectsInput
  finish: FinishUpdateOneRequiredWithoutProjectsInput
  gable: FloatFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  slide: SlideUpdateOneRequiredWithoutProjectsInput
  slideDepth: SlideDepthUpdateOneRequiredWithoutProjectsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: TypeUpdateOneRequiredWithoutProjectsInput
  user: UserUpdateOneWithoutProjectInput
  width: FloatFieldUpdateOperationsInput
}

input ProjectUpdateWithoutSlideDepthInput {
  collection: CollectionUpdateOneRequiredWithoutProjectsInput
  finish: FinishUpdateOneRequiredWithoutProjectsInput
  gable: FloatFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  projectModules: ProjectModuleUpdateManyWithoutProjectInput
  slide: SlideUpdateOneRequiredWithoutProjectsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: TypeUpdateOneRequiredWithoutProjectsInput
  user: UserUpdateOneWithoutProjectInput
  width: FloatFieldUpdateOperationsInput
}

input ProjectUpdateWithoutSlideInput {
  collection: CollectionUpdateOneRequiredWithoutProjectsInput
  finish: FinishUpdateOneRequiredWithoutProjectsInput
  gable: FloatFieldUpdateOperationsInput
  hasPegs: BoolFieldUpdateOperationsInput
  projectModules: ProjectModuleUpdateManyWithoutProjectInput
  slideDepth: SlideDepthUpdateOneRequiredWithoutProjectsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: TypeUpdateOneRequiredWithoutProjectsInput
  user: UserUpdateOneWithoutProjectInput
  width: FloatFieldUpdateOperationsInput
}

input ProjectUpsertWithWhereUniqueWithoutCollectionInput {
  create: ProjectCreateWithoutCollectionInput!
  update: ProjectUpdateWithoutCollectionInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutFinishInput {
  create: ProjectCreateWithoutFinishInput!
  update: ProjectUpdateWithoutFinishInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutSlideDepthInput {
  create: ProjectCreateWithoutSlideDepthInput!
  update: ProjectUpdateWithoutSlideDepthInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutSlideInput {
  create: ProjectCreateWithoutSlideInput!
  update: ProjectUpdateWithoutSlideInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutProjectModulesInput {
  create: ProjectCreateWithoutProjectModulesInput!
  update: ProjectUpdateWithoutProjectModulesInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  collection: CollectionWhereInput
  collectionId: IntFilter
  finish: FinishWhereInput
  finishId: IntFilter
  gable: FloatFilter
  hasPegs: BoolFilter
  id: IntFilter
  projectModules: ProjectModuleListRelationFilter
  slide: SlideWhereInput
  slideDepth: SlideDepthWhereInput
  slideDepthId: IntFilter
  slideId: IntFilter
  slug: StringFilter
  title: StringFilter
  type: TypeWhereInput
  typeId: IntFilter
  user: UserWhereInput
  userId: IntNullableFilter
  width: FloatFilter
}

input ProjectWhereUniqueInput {
  id: Int
  slug: String
}

type Query {
  categories(
    cursor: CategoryWhereUniqueInput
    orderBy: [CategoryOrderByInput!]
    skip: Int
    take: Int
    where: CategoryWhereInput
  ): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionFinishes(
    cursor: CollectionFinishesWhereUniqueInput
    orderBy: [CollectionFinishesOrderByInput!]
    skip: Int
    take: Int
    where: CollectionFinishesWhereInput
  ): [CollectionFinishes!]!
  collections(
    cursor: CollectionWhereUniqueInput
    orderBy: [CollectionOrderByInput!]
    skip: Int
    take: Int
    where: CollectionWhereInput
  ): [Collection!]!
  finish(where: FinishWhereUniqueInput!): Finish
  finishes(
    cursor: FinishWhereUniqueInput
    orderBy: [FinishOrderByInput!]
    skip: Int
    take: Int
    where: FinishWhereInput
  ): [Finish!]!
  module(where: ModuleWhereUniqueInput!): Module
  moduleCategories(
    cursor: ModuleCategoryWhereUniqueInput
    orderBy: [ModuleCategoryOrderByInput!]
    skip: Int
    take: Int
    where: ModuleCategoryWhereInput
  ): [ModuleCategory!]!
  moduleCategory(where: ModuleCategoryWhereUniqueInput!): ModuleCategory
  modules(
    cursor: ModuleWhereUniqueInput
    orderBy: [ModuleOrderByInput!]
    skip: Int
    take: Int
    where: ModuleWhereInput
  ): [Module!]!
  project(where: ProjectWhereUniqueInput!): Project
  projectModule(where: ProjectModuleWhereUniqueInput!): ProjectModule
  projectModules(
    cursor: ProjectModuleWhereUniqueInput
    orderBy: [ProjectModuleOrderByInput!]
    skip: Int
    take: Int
    where: ProjectModuleWhereInput
  ): [ProjectModule!]!
  projects(
    cursor: ProjectWhereUniqueInput
    orderBy: [ProjectOrderByInput!]
    skip: Int
    take: Int
    where: ProjectWhereInput
  ): [Project!]!
  slide(where: SlideWhereUniqueInput!): Slide
  slideDepth(where: SlideDepthWhereUniqueInput!): SlideDepth
  slideDepths(
    cursor: SlideDepthWhereUniqueInput
    orderBy: [SlideDepthOrderByInput!]
    skip: Int
    take: Int
    where: SlideDepthWhereInput
  ): [SlideDepth!]!
  slideSupplier(where: SlideSupplierWhereUniqueInput!): SlideSupplier
  slideSuppliers(
    cursor: SlideSupplierWhereUniqueInput
    orderBy: [SlideSupplierOrderByInput!]
    skip: Int
    take: Int
    where: SlideSupplierWhereInput
  ): [SlideSupplier!]!
  slides(
    cursor: SlideWhereUniqueInput
    orderBy: [SlideOrderByInput!]
    skip: Int
    take: Int
    where: SlideWhereInput
  ): [Slide!]!
  type(where: TypeWhereUniqueInput!): Type
  types(
    cursor: TypeWhereUniqueInput
    orderBy: [TypeOrderByInput!]
    skip: Int
    take: Int
    where: TypeWhereInput
  ): [Type!]!
}

type Session {
  id: Int!
  token: String!
  user: User!
  userId: Int!
}

input SessionCreateManyUserInput {
  id: Int
  token: String!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  token: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  id: IntFilter
  token: StringFilter
  userId: IntFilter
}

input SessionUpdateManyMutationInput {
  token: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  token: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  id: IntFilter
  token: StringFilter
  user: UserWhereInput
  userId: IntFilter
}

input SessionWhereUniqueInput {
  id: Int
}

type Slide {
  collection: Collection!
  collectionId: Int!
  depths(
    cursor: SlideDepthWhereUniqueInput
    orderBy: [SlideDepthOrderByInput!]
    skip: Int
    take: Int
    where: SlideDepthWhereInput
  ): [SlideDepth!]!
  formula: String!
  id: Int!
  product: String!
  projects(
    cursor: ProjectWhereUniqueInput
    orderBy: [ProjectOrderByInput!]
    skip: Int
    take: Int
    where: ProjectWhereInput
  ): [Project!]!
  slug: String!
  supplier: SlideSupplier!
  supplierId: Int!
}

input SlideCreateManyCollectionInput {
  formula: String!
  id: Int
  product: String!
  slug: String!
  supplierId: Int!
}

input SlideCreateManyCollectionInputEnvelope {
  data: [SlideCreateManyCollectionInput!]
  skipDuplicates: Boolean
}

input SlideCreateNestedManyWithoutCollectionInput {
  connect: [SlideWhereUniqueInput!]
  connectOrCreate: [SlideCreateOrConnectWithoutCollectionInput!]
  create: [SlideCreateWithoutCollectionInput!]
  createMany: SlideCreateManyCollectionInputEnvelope
}

input SlideCreateNestedOneWithoutDepthsInput {
  connect: SlideWhereUniqueInput
  connectOrCreate: SlideCreateOrConnectWithoutDepthsInput
  create: SlideCreateWithoutDepthsInput
}

input SlideCreateNestedOneWithoutProjectsInput {
  connect: SlideWhereUniqueInput
  connectOrCreate: SlideCreateOrConnectWithoutProjectsInput
  create: SlideCreateWithoutProjectsInput
}

input SlideCreateOrConnectWithoutCollectionInput {
  create: SlideCreateWithoutCollectionInput!
  where: SlideWhereUniqueInput!
}

input SlideCreateOrConnectWithoutDepthsInput {
  create: SlideCreateWithoutDepthsInput!
  where: SlideWhereUniqueInput!
}

input SlideCreateOrConnectWithoutProjectsInput {
  create: SlideCreateWithoutProjectsInput!
  where: SlideWhereUniqueInput!
}

input SlideCreateWithoutCollectionInput {
  depths: SlideDepthCreateNestedManyWithoutSlideInput
  formula: String!
  product: String!
  projects: ProjectCreateNestedManyWithoutSlideInput
  slug: String!
  supplier: SlideSupplierCreateNestedOneWithoutSlidesInput!
}

input SlideCreateWithoutDepthsInput {
  collection: CollectionCreateNestedOneWithoutSlidesInput!
  formula: String!
  product: String!
  projects: ProjectCreateNestedManyWithoutSlideInput
  slug: String!
  supplier: SlideSupplierCreateNestedOneWithoutSlidesInput!
}

input SlideCreateWithoutProjectsInput {
  collection: CollectionCreateNestedOneWithoutSlidesInput!
  depths: SlideDepthCreateNestedManyWithoutSlideInput
  formula: String!
  product: String!
  slug: String!
  supplier: SlideSupplierCreateNestedOneWithoutSlidesInput!
}

type SlideDepth {
  depth: Float!
  display: String!
  id: Int!
  projects(
    cursor: ProjectWhereUniqueInput
    orderBy: [ProjectOrderByInput!]
    skip: Int
    take: Int
    where: ProjectWhereInput
  ): [Project!]!
  slide: Slide!
  slideId: Int!
}

input SlideDepthCreateManySlideInput {
  depth: Float!
  display: String!
  id: Int
}

input SlideDepthCreateManySlideInputEnvelope {
  data: [SlideDepthCreateManySlideInput!]
  skipDuplicates: Boolean
}

input SlideDepthCreateNestedManyWithoutSlideInput {
  connect: [SlideDepthWhereUniqueInput!]
  connectOrCreate: [SlideDepthCreateOrConnectWithoutSlideInput!]
  create: [SlideDepthCreateWithoutSlideInput!]
  createMany: SlideDepthCreateManySlideInputEnvelope
}

input SlideDepthCreateNestedOneWithoutProjectsInput {
  connect: SlideDepthWhereUniqueInput
  connectOrCreate: SlideDepthCreateOrConnectWithoutProjectsInput
  create: SlideDepthCreateWithoutProjectsInput
}

input SlideDepthCreateOrConnectWithoutProjectsInput {
  create: SlideDepthCreateWithoutProjectsInput!
  where: SlideDepthWhereUniqueInput!
}

input SlideDepthCreateOrConnectWithoutSlideInput {
  create: SlideDepthCreateWithoutSlideInput!
  where: SlideDepthWhereUniqueInput!
}

input SlideDepthCreateWithoutProjectsInput {
  depth: Float!
  display: String!
  slide: SlideCreateNestedOneWithoutDepthsInput!
}

input SlideDepthCreateWithoutSlideInput {
  depth: Float!
  display: String!
  projects: ProjectCreateNestedManyWithoutSlideDepthInput
}

input SlideDepthListRelationFilter {
  every: SlideDepthWhereInput
  none: SlideDepthWhereInput
  some: SlideDepthWhereInput
}

input SlideDepthOrderByInput {
  depth: SortOrder
  display: SortOrder
  id: SortOrder
  slideId: SortOrder
}

input SlideDepthScalarWhereInput {
  AND: [SlideDepthScalarWhereInput!]
  NOT: [SlideDepthScalarWhereInput!]
  OR: [SlideDepthScalarWhereInput!]
  depth: FloatFilter
  display: StringFilter
  id: IntFilter
  slideId: IntFilter
}

input SlideDepthUpdateManyMutationInput {
  depth: FloatFieldUpdateOperationsInput
  display: StringFieldUpdateOperationsInput
}

input SlideDepthUpdateManyWithWhereWithoutSlideInput {
  data: SlideDepthUpdateManyMutationInput!
  where: SlideDepthScalarWhereInput!
}

input SlideDepthUpdateManyWithoutSlideInput {
  connect: [SlideDepthWhereUniqueInput!]
  connectOrCreate: [SlideDepthCreateOrConnectWithoutSlideInput!]
  create: [SlideDepthCreateWithoutSlideInput!]
  createMany: SlideDepthCreateManySlideInputEnvelope
  delete: [SlideDepthWhereUniqueInput!]
  deleteMany: [SlideDepthScalarWhereInput!]
  disconnect: [SlideDepthWhereUniqueInput!]
  set: [SlideDepthWhereUniqueInput!]
  update: [SlideDepthUpdateWithWhereUniqueWithoutSlideInput!]
  updateMany: [SlideDepthUpdateManyWithWhereWithoutSlideInput!]
  upsert: [SlideDepthUpsertWithWhereUniqueWithoutSlideInput!]
}

input SlideDepthUpdateOneRequiredWithoutProjectsInput {
  connect: SlideDepthWhereUniqueInput
  connectOrCreate: SlideDepthCreateOrConnectWithoutProjectsInput
  create: SlideDepthCreateWithoutProjectsInput
  update: SlideDepthUpdateWithoutProjectsInput
  upsert: SlideDepthUpsertWithoutProjectsInput
}

input SlideDepthUpdateWithWhereUniqueWithoutSlideInput {
  data: SlideDepthUpdateWithoutSlideInput!
  where: SlideDepthWhereUniqueInput!
}

input SlideDepthUpdateWithoutProjectsInput {
  depth: FloatFieldUpdateOperationsInput
  display: StringFieldUpdateOperationsInput
  slide: SlideUpdateOneRequiredWithoutDepthsInput
}

input SlideDepthUpdateWithoutSlideInput {
  depth: FloatFieldUpdateOperationsInput
  display: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutSlideDepthInput
}

input SlideDepthUpsertWithWhereUniqueWithoutSlideInput {
  create: SlideDepthCreateWithoutSlideInput!
  update: SlideDepthUpdateWithoutSlideInput!
  where: SlideDepthWhereUniqueInput!
}

input SlideDepthUpsertWithoutProjectsInput {
  create: SlideDepthCreateWithoutProjectsInput!
  update: SlideDepthUpdateWithoutProjectsInput!
}

input SlideDepthWhereInput {
  AND: [SlideDepthWhereInput!]
  NOT: [SlideDepthWhereInput!]
  OR: [SlideDepthWhereInput!]
  depth: FloatFilter
  display: StringFilter
  id: IntFilter
  projects: ProjectListRelationFilter
  slide: SlideWhereInput
  slideId: IntFilter
}

input SlideDepthWhereUniqueInput {
  id: Int
}

input SlideListRelationFilter {
  every: SlideWhereInput
  none: SlideWhereInput
  some: SlideWhereInput
}

input SlideOrderByInput {
  collectionId: SortOrder
  formula: SortOrder
  id: SortOrder
  product: SortOrder
  slug: SortOrder
  supplierId: SortOrder
}

input SlideScalarWhereInput {
  AND: [SlideScalarWhereInput!]
  NOT: [SlideScalarWhereInput!]
  OR: [SlideScalarWhereInput!]
  collectionId: IntFilter
  formula: StringFilter
  id: IntFilter
  product: StringFilter
  slug: StringFilter
  supplierId: IntFilter
}

type SlideSupplier {
  id: Int!
  name: String!
  slides(
    cursor: SlideWhereUniqueInput
    orderBy: [SlideOrderByInput!]
    skip: Int
    take: Int
    where: SlideWhereInput
  ): [Slide!]!
  slug: String!
  thumbnailUrl: String
}

input SlideSupplierCreateNestedOneWithoutSlidesInput {
  connect: SlideSupplierWhereUniqueInput
  connectOrCreate: SlideSupplierCreateOrConnectWithoutSlidesInput
  create: SlideSupplierCreateWithoutSlidesInput
}

input SlideSupplierCreateOrConnectWithoutSlidesInput {
  create: SlideSupplierCreateWithoutSlidesInput!
  where: SlideSupplierWhereUniqueInput!
}

input SlideSupplierCreateWithoutSlidesInput {
  name: String!
  slug: String!
  thumbnailUrl: String
}

input SlideSupplierOrderByInput {
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  thumbnailUrl: SortOrder
}

input SlideSupplierUpdateOneRequiredWithoutSlidesInput {
  connect: SlideSupplierWhereUniqueInput
  connectOrCreate: SlideSupplierCreateOrConnectWithoutSlidesInput
  create: SlideSupplierCreateWithoutSlidesInput
  update: SlideSupplierUpdateWithoutSlidesInput
  upsert: SlideSupplierUpsertWithoutSlidesInput
}

input SlideSupplierUpdateWithoutSlidesInput {
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
}

input SlideSupplierUpsertWithoutSlidesInput {
  create: SlideSupplierCreateWithoutSlidesInput!
  update: SlideSupplierUpdateWithoutSlidesInput!
}

input SlideSupplierWhereInput {
  AND: [SlideSupplierWhereInput!]
  NOT: [SlideSupplierWhereInput!]
  OR: [SlideSupplierWhereInput!]
  id: IntFilter
  name: StringFilter
  slides: SlideListRelationFilter
  slug: StringFilter
  thumbnailUrl: StringNullableFilter
}

input SlideSupplierWhereUniqueInput {
  id: Int
  slug: String
}

input SlideUpdateManyMutationInput {
  formula: StringFieldUpdateOperationsInput
  product: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input SlideUpdateManyWithWhereWithoutCollectionInput {
  data: SlideUpdateManyMutationInput!
  where: SlideScalarWhereInput!
}

input SlideUpdateManyWithoutCollectionInput {
  connect: [SlideWhereUniqueInput!]
  connectOrCreate: [SlideCreateOrConnectWithoutCollectionInput!]
  create: [SlideCreateWithoutCollectionInput!]
  createMany: SlideCreateManyCollectionInputEnvelope
  delete: [SlideWhereUniqueInput!]
  deleteMany: [SlideScalarWhereInput!]
  disconnect: [SlideWhereUniqueInput!]
  set: [SlideWhereUniqueInput!]
  update: [SlideUpdateWithWhereUniqueWithoutCollectionInput!]
  updateMany: [SlideUpdateManyWithWhereWithoutCollectionInput!]
  upsert: [SlideUpsertWithWhereUniqueWithoutCollectionInput!]
}

input SlideUpdateOneRequiredWithoutDepthsInput {
  connect: SlideWhereUniqueInput
  connectOrCreate: SlideCreateOrConnectWithoutDepthsInput
  create: SlideCreateWithoutDepthsInput
  update: SlideUpdateWithoutDepthsInput
  upsert: SlideUpsertWithoutDepthsInput
}

input SlideUpdateOneRequiredWithoutProjectsInput {
  connect: SlideWhereUniqueInput
  connectOrCreate: SlideCreateOrConnectWithoutProjectsInput
  create: SlideCreateWithoutProjectsInput
  update: SlideUpdateWithoutProjectsInput
  upsert: SlideUpsertWithoutProjectsInput
}

input SlideUpdateWithWhereUniqueWithoutCollectionInput {
  data: SlideUpdateWithoutCollectionInput!
  where: SlideWhereUniqueInput!
}

input SlideUpdateWithoutCollectionInput {
  depths: SlideDepthUpdateManyWithoutSlideInput
  formula: StringFieldUpdateOperationsInput
  product: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutSlideInput
  slug: StringFieldUpdateOperationsInput
  supplier: SlideSupplierUpdateOneRequiredWithoutSlidesInput
}

input SlideUpdateWithoutDepthsInput {
  collection: CollectionUpdateOneRequiredWithoutSlidesInput
  formula: StringFieldUpdateOperationsInput
  product: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutSlideInput
  slug: StringFieldUpdateOperationsInput
  supplier: SlideSupplierUpdateOneRequiredWithoutSlidesInput
}

input SlideUpdateWithoutProjectsInput {
  collection: CollectionUpdateOneRequiredWithoutSlidesInput
  depths: SlideDepthUpdateManyWithoutSlideInput
  formula: StringFieldUpdateOperationsInput
  product: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  supplier: SlideSupplierUpdateOneRequiredWithoutSlidesInput
}

input SlideUpsertWithWhereUniqueWithoutCollectionInput {
  create: SlideCreateWithoutCollectionInput!
  update: SlideUpdateWithoutCollectionInput!
  where: SlideWhereUniqueInput!
}

input SlideUpsertWithoutDepthsInput {
  create: SlideCreateWithoutDepthsInput!
  update: SlideUpdateWithoutDepthsInput!
}

input SlideUpsertWithoutProjectsInput {
  create: SlideCreateWithoutProjectsInput!
  update: SlideUpdateWithoutProjectsInput!
}

input SlideWhereInput {
  AND: [SlideWhereInput!]
  NOT: [SlideWhereInput!]
  OR: [SlideWhereInput!]
  collection: CollectionWhereInput
  collectionId: IntFilter
  depths: SlideDepthListRelationFilter
  formula: StringFilter
  id: IntFilter
  product: StringFilter
  projects: ProjectListRelationFilter
  slug: StringFilter
  supplier: SlideSupplierWhereInput
  supplierId: IntFilter
}

input SlideWhereUniqueInput {
  id: Int
  slug: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Type {
  description: String
  hasPegs: Boolean!
  id: Int!
  name: String!
  projects(
    cursor: ProjectWhereUniqueInput
    orderBy: [ProjectOrderByInput!]
    skip: Int
    take: Int
    where: ProjectWhereInput
  ): [Project!]!
  slug: String!
  thumbnailUrl: String
}

input TypeCreateNestedOneWithoutProjectsInput {
  connect: TypeWhereUniqueInput
  connectOrCreate: TypeCreateOrConnectWithoutProjectsInput
  create: TypeCreateWithoutProjectsInput
}

input TypeCreateOrConnectWithoutProjectsInput {
  create: TypeCreateWithoutProjectsInput!
  where: TypeWhereUniqueInput!
}

input TypeCreateWithoutProjectsInput {
  hasPegs: Boolean
  slug: String!
  thumbnailUrl: String
  translations: TypeTranslationsCreateNestedManyWithoutTypeInput
}

input TypeOrderByInput {
  hasPegs: SortOrder
  id: SortOrder
  slug: SortOrder
  thumbnailUrl: SortOrder
}

type TypeTranslations {
  description: String
  id: Int!
  locale: Locale!
  name: String!
  type: Type!
  typeId: Int!
}

input TypeTranslationsCreateManyTypeInput {
  description: String
  id: Int
  locale: Locale!
  name: String!
}

input TypeTranslationsCreateManyTypeInputEnvelope {
  data: [TypeTranslationsCreateManyTypeInput!]
  skipDuplicates: Boolean
}

input TypeTranslationsCreateNestedManyWithoutTypeInput {
  connect: [TypeTranslationsWhereUniqueInput!]
  connectOrCreate: [TypeTranslationsCreateOrConnectWithoutTypeInput!]
  create: [TypeTranslationsCreateWithoutTypeInput!]
  createMany: TypeTranslationsCreateManyTypeInputEnvelope
}

input TypeTranslationsCreateOrConnectWithoutTypeInput {
  create: TypeTranslationsCreateWithoutTypeInput!
  where: TypeTranslationsWhereUniqueInput!
}

input TypeTranslationsCreateWithoutTypeInput {
  description: String
  locale: Locale!
  name: String!
}

input TypeTranslationsListRelationFilter {
  every: TypeTranslationsWhereInput
  none: TypeTranslationsWhereInput
  some: TypeTranslationsWhereInput
}

input TypeTranslationsScalarWhereInput {
  AND: [TypeTranslationsScalarWhereInput!]
  NOT: [TypeTranslationsScalarWhereInput!]
  OR: [TypeTranslationsScalarWhereInput!]
  description: StringNullableFilter
  id: IntFilter
  locale: EnumLocaleFilter
  name: StringFilter
  typeId: IntFilter
}

input TypeTranslationsUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  locale: EnumLocaleFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TypeTranslationsUpdateManyWithWhereWithoutTypeInput {
  data: TypeTranslationsUpdateManyMutationInput!
  where: TypeTranslationsScalarWhereInput!
}

input TypeTranslationsUpdateManyWithoutTypeInput {
  connect: [TypeTranslationsWhereUniqueInput!]
  connectOrCreate: [TypeTranslationsCreateOrConnectWithoutTypeInput!]
  create: [TypeTranslationsCreateWithoutTypeInput!]
  createMany: TypeTranslationsCreateManyTypeInputEnvelope
  delete: [TypeTranslationsWhereUniqueInput!]
  deleteMany: [TypeTranslationsScalarWhereInput!]
  disconnect: [TypeTranslationsWhereUniqueInput!]
  set: [TypeTranslationsWhereUniqueInput!]
  update: [TypeTranslationsUpdateWithWhereUniqueWithoutTypeInput!]
  updateMany: [TypeTranslationsUpdateManyWithWhereWithoutTypeInput!]
  upsert: [TypeTranslationsUpsertWithWhereUniqueWithoutTypeInput!]
}

input TypeTranslationsUpdateWithWhereUniqueWithoutTypeInput {
  data: TypeTranslationsUpdateWithoutTypeInput!
  where: TypeTranslationsWhereUniqueInput!
}

input TypeTranslationsUpdateWithoutTypeInput {
  description: NullableStringFieldUpdateOperationsInput
  locale: EnumLocaleFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TypeTranslationsUpsertWithWhereUniqueWithoutTypeInput {
  create: TypeTranslationsCreateWithoutTypeInput!
  update: TypeTranslationsUpdateWithoutTypeInput!
  where: TypeTranslationsWhereUniqueInput!
}

input TypeTranslationsWhereInput {
  AND: [TypeTranslationsWhereInput!]
  NOT: [TypeTranslationsWhereInput!]
  OR: [TypeTranslationsWhereInput!]
  description: StringNullableFilter
  id: IntFilter
  locale: EnumLocaleFilter
  name: StringFilter
  type: TypeWhereInput
  typeId: IntFilter
}

input TypeTranslationsWhereUniqueInput {
  id: Int
}

input TypeUpdateOneRequiredWithoutProjectsInput {
  connect: TypeWhereUniqueInput
  connectOrCreate: TypeCreateOrConnectWithoutProjectsInput
  create: TypeCreateWithoutProjectsInput
  update: TypeUpdateWithoutProjectsInput
  upsert: TypeUpsertWithoutProjectsInput
}

input TypeUpdateWithoutProjectsInput {
  hasPegs: BoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  translations: TypeTranslationsUpdateManyWithoutTypeInput
}

input TypeUpsertWithoutProjectsInput {
  create: TypeCreateWithoutProjectsInput!
  update: TypeUpdateWithoutProjectsInput!
}

input TypeWhereInput {
  AND: [TypeWhereInput!]
  NOT: [TypeWhereInput!]
  OR: [TypeWhereInput!]
  hasPegs: BoolFilter
  id: IntFilter
  projects: ProjectListRelationFilter
  slug: StringFilter
  thumbnailUrl: StringNullableFilter
  translations: TypeTranslationsListRelationFilter
}

input TypeWhereUniqueInput {
  id: Int
  slug: String
}

type User {
  email: String!
  id: Int!
  marathonUserId: Int!
  project(cursor: ProjectWhereUniqueInput, skip: Int, take: Int): [Project!]!
  session(cursor: SessionWhereUniqueInput, skip: Int, take: Int): [Session!]!
}

input UserCreateNestedOneWithoutProjectInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectInput
  create: UserCreateWithoutProjectInput
}

input UserCreateOrConnectWithoutProjectInput {
  create: UserCreateWithoutProjectInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutProjectInput {
  email: String!
  marathonUserId: Int!
  session: SessionCreateNestedManyWithoutUserInput
}

input UserSingIn {
  email: String
  password: String
}

input UserUpdateOneWithoutProjectInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectInput
  create: UserCreateWithoutProjectInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutProjectInput
  upsert: UserUpsertWithoutProjectInput
}

input UserUpdateWithoutProjectInput {
  email: StringFieldUpdateOperationsInput
  marathonUserId: IntFieldUpdateOperationsInput
  session: SessionUpdateManyWithoutUserInput
}

input UserUpsertWithoutProjectInput {
  create: UserCreateWithoutProjectInput!
  update: UserUpdateWithoutProjectInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  id: IntFilter
  marathonUserId: IntFilter
  project: ProjectListRelationFilter
  session: SessionListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
