### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Collection {
  id: Int!
  name: String!
  projects(cursor: ProjectWhereUniqueInput, skip: Int, take: Int): [Project!]!
}

input CollectionCreateOrConnectWithoutProjectsInput {
  create: CollectionCreateWithoutProjectsInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateWithoutProjectsInput {
  name: String!
}

input CollectionUpdateOneRequiredWithoutProjectsInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutProjectsInput
  create: CollectionCreateWithoutProjectsInput
  update: CollectionUpdateWithoutProjectsInput
  upsert: CollectionUpsertWithoutProjectsInput
}

input CollectionUpdateWithoutProjectsInput {
  name: StringFieldUpdateOperationsInput
}

input CollectionUpsertWithoutProjectsInput {
  create: CollectionCreateWithoutProjectsInput!
  update: CollectionUpdateWithoutProjectsInput!
}

input CollectionWhereUniqueInput {
  id: Int
}

enum DrawerType {
  deep
  shallow
}

input EnumDrawerTypeFieldUpdateOperationsInput {
  set: DrawerType
}

input EnumMeasureSystemFieldUpdateOperationsInput {
  set: MeasureSystem
}

type Finish {
  id: Int!
  name: String!
  projects(cursor: ProjectWhereUniqueInput, skip: Int, take: Int): [Project!]!
}

input FinishCreateOrConnectWithoutProjectsInput {
  create: FinishCreateWithoutProjectsInput!
  where: FinishWhereUniqueInput!
}

input FinishCreateWithoutProjectsInput {
  name: String!
}

input FinishUpdateOneRequiredWithoutProjectsInput {
  connect: FinishWhereUniqueInput
  connectOrCreate: FinishCreateOrConnectWithoutProjectsInput
  create: FinishCreateWithoutProjectsInput
  update: FinishUpdateWithoutProjectsInput
  upsert: FinishUpsertWithoutProjectsInput
}

input FinishUpdateWithoutProjectsInput {
  name: StringFieldUpdateOperationsInput
}

input FinishUpsertWithoutProjectsInput {
  create: FinishCreateWithoutProjectsInput!
  update: FinishUpdateWithoutProjectsInput!
}

input FinishWhereUniqueInput {
  id: Int
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

enum MeasureSystem {
  imperial
  metric
}

type Mutation {
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
}

type Project {
  collection: Collection!
  collectionId: Int!
  finish: Finish!
  finishId: Int!
  gableInCM: Float!
  gableInIN: String!
  group: String!
  id: Int!
  mainMeasureSystem: MeasureSystem!
  slide: Slide!
  slideId: Int!
  title: String!
  type: DrawerType!
  user: User!
  userId: Int!
  widthInCM: Float!
  widthInIN: String!
}

input ProjectUpdateInput {
  collection: CollectionUpdateOneRequiredWithoutProjectsInput
  finish: FinishUpdateOneRequiredWithoutProjectsInput
  gableInCM: FloatFieldUpdateOperationsInput
  gableInIN: StringFieldUpdateOperationsInput
  group: StringFieldUpdateOperationsInput
  mainMeasureSystem: EnumMeasureSystemFieldUpdateOperationsInput
  slide: SlideUpdateOneRequiredWithoutProjectsInput
  title: StringFieldUpdateOperationsInput
  type: EnumDrawerTypeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectsInput
  widthInCM: FloatFieldUpdateOperationsInput
  widthInIN: StringFieldUpdateOperationsInput
}

input ProjectWhereUniqueInput {
  id: Int
}

type Query {
  project(where: ProjectWhereUniqueInput!): Project
}

type Slide {
  depthInCM: Float!
  depthInIN: String!
  id: Int!
  model: String!
  projects(cursor: ProjectWhereUniqueInput, skip: Int, take: Int): [Project!]!
}

input SlideCreateOrConnectWithoutProjectsInput {
  create: SlideCreateWithoutProjectsInput!
  where: SlideWhereUniqueInput!
}

input SlideCreateWithoutProjectsInput {
  depthInCM: Float!
  depthInIN: String!
  model: String!
}

input SlideUpdateOneRequiredWithoutProjectsInput {
  connect: SlideWhereUniqueInput
  connectOrCreate: SlideCreateOrConnectWithoutProjectsInput
  create: SlideCreateWithoutProjectsInput
  update: SlideUpdateWithoutProjectsInput
  upsert: SlideUpsertWithoutProjectsInput
}

input SlideUpdateWithoutProjectsInput {
  depthInCM: FloatFieldUpdateOperationsInput
  depthInIN: StringFieldUpdateOperationsInput
  model: StringFieldUpdateOperationsInput
}

input SlideUpsertWithoutProjectsInput {
  create: SlideCreateWithoutProjectsInput!
  update: SlideUpdateWithoutProjectsInput!
}

input SlideWhereUniqueInput {
  id: Int
}

input StringFieldUpdateOperationsInput {
  set: String
}

type User {
  email: String!
  id: Int!
  projects(cursor: ProjectWhereUniqueInput, skip: Int, take: Int): [Project!]!
}

input UserCreateOrConnectWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutProjectsInput {
  email: String!
}

input UserUpdateOneRequiredWithoutProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectsInput
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateWithoutProjectsInput {
  email: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  update: UserUpdateWithoutProjectsInput!
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
